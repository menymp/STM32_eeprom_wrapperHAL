
SPI_EEPROM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001ea8  08001ea8  00011ea8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f0c  08001f0c  00011f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f10  08001f10  00011f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          000000f4  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000100  20000100  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000122b8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000025cc  00000000  00000000  000322f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004f08  00000000  00000000  000348c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000770  00000000  00000000  000397c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ae0  00000000  00000000  00039f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004a73  00000000  00000000  0003aa18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002b8a  00000000  00000000  0003f48b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00042015  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000014a8  00000000  00000000  00042094  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e90 	.word	0x08001e90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001e90 	.word	0x08001e90

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 f894 	bl	800030c <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 f856 	bl	80002a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
{
 8000212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f82f 	bl	8000280 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f001 fd2a 	bl	8001c80 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028

08000258 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000258:	b538      	push	{r3, r4, r5, lr}
 800025a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800025c:	f7ff fff6 	bl	800024c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000260:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000262:	bf1c      	itt	ne
 8000264:	4b05      	ldrne	r3, [pc, #20]	; (800027c <HAL_Delay+0x24>)
 8000266:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000268:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800026a:	bf18      	it	ne
 800026c:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800026e:	f7ff ffed 	bl	800024c <HAL_GetTick>
 8000272:	1b40      	subs	r0, r0, r5
 8000274:	4284      	cmp	r4, r0
 8000276:	d8fa      	bhi.n	800026e <HAL_Delay+0x16>
  {
  }
}
 8000278:	bd38      	pop	{r3, r4, r5, pc}
 800027a:	bf00      	nop
 800027c:	20000000 	.word	0x20000000

08000280 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000280:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000282:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000284:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000288:	041b      	lsls	r3, r3, #16
 800028a:	0c1b      	lsrs	r3, r3, #16
 800028c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000290:	0200      	lsls	r0, r0, #8
 8000292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000296:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800029a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800029c:	60d3      	str	r3, [r2, #12]
 800029e:	4770      	bx	lr
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002a6:	b530      	push	{r4, r5, lr}
 80002a8:	68dc      	ldr	r4, [r3, #12]
 80002aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	bf28      	it	cs
 80002b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002bc:	f04f 0501 	mov.w	r5, #1
 80002c0:	fa05 f303 	lsl.w	r3, r5, r3
 80002c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c8:	bf8c      	ite	hi
 80002ca:	3c03      	subhi	r4, #3
 80002cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ce:	4019      	ands	r1, r3
 80002d0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002d2:	fa05 f404 	lsl.w	r4, r5, r4
 80002d6:	3c01      	subs	r4, #1
 80002d8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002dc:	ea42 0201 	orr.w	r2, r2, r1
 80002e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	bfaf      	iteee	ge
 80002e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	f000 000f 	andlt.w	r0, r0, #15
 80002ee:	4b06      	ldrlt	r3, [pc, #24]	; (8000308 <HAL_NVIC_SetPriority+0x64>)
 80002f0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	bfa5      	ittet	ge
 80002f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002f8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000300:	bd30      	pop	{r4, r5, pc}
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000ed14 	.word	0xe000ed14

0800030c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800030c:	3801      	subs	r0, #1
 800030e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000312:	d20a      	bcs.n	800032a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000316:	4a07      	ldr	r2, [pc, #28]	; (8000334 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000318:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	21f0      	movs	r1, #240	; 0xf0
 800031c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000320:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000322:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000324:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800032a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000e010 	.word	0xe000e010
 8000334:	e000ed00 	.word	0xe000ed00

08000338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800033c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800033e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000340:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80004a8 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000344:	4a56      	ldr	r2, [pc, #344]	; (80004a0 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000346:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000348:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 800034c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800034e:	9c01      	ldr	r4, [sp, #4]
 8000350:	40dc      	lsrs	r4, r3
 8000352:	d102      	bne.n	800035a <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000354:	b005      	add	sp, #20
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800035a:	2401      	movs	r4, #1
 800035c:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000360:	9c01      	ldr	r4, [sp, #4]
 8000362:	ea14 050a 	ands.w	r5, r4, sl
 8000366:	f000 8093 	beq.w	8000490 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800036a:	684c      	ldr	r4, [r1, #4]
 800036c:	f024 0b10 	bic.w	fp, r4, #16
 8000370:	f1bb 0f02 	cmp.w	fp, #2
 8000374:	d111      	bne.n	800039a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000376:	08df      	lsrs	r7, r3, #3
 8000378:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800037c:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000380:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000382:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000386:	fa09 fc0e 	lsl.w	ip, r9, lr
 800038a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800038e:	690e      	ldr	r6, [r1, #16]
 8000390:	fa06 f60e 	lsl.w	r6, r6, lr
 8000394:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000398:	623e      	str	r6, [r7, #32]
 800039a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800039e:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80003a0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003a2:	fa07 f70c 	lsl.w	r7, r7, ip
 80003a6:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003a8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003ac:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ae:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b2:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003b6:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ba:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80003be:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003c0:	d811      	bhi.n	80003e6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80003c2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003c4:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003c8:	68ce      	ldr	r6, [r1, #12]
 80003ca:	fa06 fe0c 	lsl.w	lr, r6, ip
 80003ce:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80003d2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80003d4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003d6:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003da:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80003de:	409e      	lsls	r6, r3
 80003e0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80003e4:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80003e6:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003e8:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003ea:	688e      	ldr	r6, [r1, #8]
 80003ec:	fa06 f60c 	lsl.w	r6, r6, ip
 80003f0:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003f2:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80003f4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003f6:	d54b      	bpl.n	8000490 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f8:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80003fc:	f046 0601 	orr.w	r6, r6, #1
 8000400:	f8c8 6018 	str.w	r6, [r8, #24]
 8000404:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000408:	f023 0703 	bic.w	r7, r3, #3
 800040c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000410:	f006 0601 	and.w	r6, r6, #1
 8000414:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000418:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800041a:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041e:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000420:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000422:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000426:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800042a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800042e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000432:	d02f      	beq.n	8000494 <HAL_GPIO_Init+0x15c>
 8000434:	4e1b      	ldr	r6, [pc, #108]	; (80004a4 <HAL_GPIO_Init+0x16c>)
 8000436:	42b0      	cmp	r0, r6
 8000438:	d02e      	beq.n	8000498 <HAL_GPIO_Init+0x160>
 800043a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800043e:	42b0      	cmp	r0, r6
 8000440:	d02c      	beq.n	800049c <HAL_GPIO_Init+0x164>
 8000442:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000446:	42b0      	cmp	r0, r6
 8000448:	bf14      	ite	ne
 800044a:	2605      	movne	r6, #5
 800044c:	2603      	moveq	r6, #3
 800044e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000452:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000456:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000458:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800045a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800045c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000460:	bf0c      	ite	eq
 8000462:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000464:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000466:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000468:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800046a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800046e:	bf0c      	ite	eq
 8000470:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000472:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000474:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000476:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000478:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800047c:	bf0c      	ite	eq
 800047e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000480:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000482:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000484:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000486:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000488:	bf54      	ite	pl
 800048a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800048c:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 800048e:	60d6      	str	r6, [r2, #12]
    position++;
 8000490:	3301      	adds	r3, #1
 8000492:	e75c      	b.n	800034e <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000494:	2600      	movs	r6, #0
 8000496:	e7da      	b.n	800044e <HAL_GPIO_Init+0x116>
 8000498:	2601      	movs	r6, #1
 800049a:	e7d8      	b.n	800044e <HAL_GPIO_Init+0x116>
 800049c:	2602      	movs	r6, #2
 800049e:	e7d6      	b.n	800044e <HAL_GPIO_Init+0x116>
 80004a0:	40010400 	.word	0x40010400
 80004a4:	48000400 	.word	0x48000400
 80004a8:	40021000 	.word	0x40021000

080004ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004ac:	b10a      	cbz	r2, 80004b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004ae:	6181      	str	r1, [r0, #24]
 80004b0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004b2:	6281      	str	r1, [r0, #40]	; 0x28
 80004b4:	4770      	bx	lr

080004b6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004b6:	6943      	ldr	r3, [r0, #20]
 80004b8:	4059      	eors	r1, r3
 80004ba:	6141      	str	r1, [r0, #20]
 80004bc:	4770      	bx	lr
	...

080004c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80004c4:	4605      	mov	r5, r0
 80004c6:	b918      	cbnz	r0, 80004d0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80004c8:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80004ca:	b002      	add	sp, #8
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004d0:	6803      	ldr	r3, [r0, #0]
 80004d2:	07da      	lsls	r2, r3, #31
 80004d4:	d411      	bmi.n	80004fa <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004d6:	682b      	ldr	r3, [r5, #0]
 80004d8:	079b      	lsls	r3, r3, #30
 80004da:	f100 8085 	bmi.w	80005e8 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004de:	682b      	ldr	r3, [r5, #0]
 80004e0:	071c      	lsls	r4, r3, #28
 80004e2:	f100 80f6 	bmi.w	80006d2 <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004e6:	682b      	ldr	r3, [r5, #0]
 80004e8:	0758      	lsls	r0, r3, #29
 80004ea:	f100 813f 	bmi.w	800076c <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004ee:	69ea      	ldr	r2, [r5, #28]
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	f040 81d6 	bne.w	80008a2 <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 80004f6:	2000      	movs	r0, #0
 80004f8:	e7e7      	b.n	80004ca <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004fa:	4cba      	ldr	r4, [pc, #744]	; (80007e4 <HAL_RCC_OscConfig+0x324>)
 80004fc:	6863      	ldr	r3, [r4, #4]
 80004fe:	f003 030c 	and.w	r3, r3, #12
 8000502:	2b04      	cmp	r3, #4
 8000504:	d007      	beq.n	8000516 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000506:	6863      	ldr	r3, [r4, #4]
 8000508:	f003 030c 	and.w	r3, r3, #12
 800050c:	2b08      	cmp	r3, #8
 800050e:	d116      	bne.n	800053e <HAL_RCC_OscConfig+0x7e>
 8000510:	6863      	ldr	r3, [r4, #4]
 8000512:	03df      	lsls	r7, r3, #15
 8000514:	d513      	bpl.n	800053e <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000516:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800051a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800051e:	6821      	ldr	r1, [r4, #0]
 8000520:	fa93 f3a3 	rbit	r3, r3
 8000524:	fab3 f383 	clz	r3, r3
 8000528:	f003 031f 	and.w	r3, r3, #31
 800052c:	2201      	movs	r2, #1
 800052e:	fa02 f303 	lsl.w	r3, r2, r3
 8000532:	420b      	tst	r3, r1
 8000534:	d0cf      	beq.n	80004d6 <HAL_RCC_OscConfig+0x16>
 8000536:	686b      	ldr	r3, [r5, #4]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d1cc      	bne.n	80004d6 <HAL_RCC_OscConfig+0x16>
 800053c:	e7c4      	b.n	80004c8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800053e:	686a      	ldr	r2, [r5, #4]
 8000540:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000544:	d125      	bne.n	8000592 <HAL_RCC_OscConfig+0xd2>
 8000546:	6823      	ldr	r3, [r4, #0]
 8000548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800054c:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800054e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000550:	68a9      	ldr	r1, [r5, #8]
 8000552:	f023 030f 	bic.w	r3, r3, #15
 8000556:	430b      	orrs	r3, r1
 8000558:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800055a:	b352      	cbz	r2, 80005b2 <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 800055c:	f7ff fe76 	bl	800024c <HAL_GetTick>
 8000560:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000564:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000566:	2701      	movs	r7, #1
 8000568:	fa96 f3a6 	rbit	r3, r6
 800056c:	6822      	ldr	r2, [r4, #0]
 800056e:	fa96 f3a6 	rbit	r3, r6
 8000572:	fab3 f383 	clz	r3, r3
 8000576:	f003 031f 	and.w	r3, r3, #31
 800057a:	fa07 f303 	lsl.w	r3, r7, r3
 800057e:	4213      	tst	r3, r2
 8000580:	d1a9      	bne.n	80004d6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000582:	f7ff fe63 	bl	800024c <HAL_GetTick>
 8000586:	eba0 0008 	sub.w	r0, r0, r8
 800058a:	2864      	cmp	r0, #100	; 0x64
 800058c:	d9ec      	bls.n	8000568 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 800058e:	2003      	movs	r0, #3
 8000590:	e79b      	b.n	80004ca <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000592:	6823      	ldr	r3, [r4, #0]
 8000594:	b932      	cbnz	r2, 80005a4 <HAL_RCC_OscConfig+0xe4>
 8000596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800059a:	6023      	str	r3, [r4, #0]
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a2:	e7d3      	b.n	800054c <HAL_RCC_OscConfig+0x8c>
 80005a4:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80005a8:	d1f5      	bne.n	8000596 <HAL_RCC_OscConfig+0xd6>
 80005aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005ae:	6023      	str	r3, [r4, #0]
 80005b0:	e7c9      	b.n	8000546 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80005b2:	f7ff fe4b 	bl	800024c <HAL_GetTick>
 80005b6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005ba:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005bc:	2701      	movs	r7, #1
 80005be:	fa96 f3a6 	rbit	r3, r6
 80005c2:	6822      	ldr	r2, [r4, #0]
 80005c4:	fa96 f3a6 	rbit	r3, r6
 80005c8:	fab3 f383 	clz	r3, r3
 80005cc:	f003 031f 	and.w	r3, r3, #31
 80005d0:	fa07 f303 	lsl.w	r3, r7, r3
 80005d4:	4213      	tst	r3, r2
 80005d6:	f43f af7e 	beq.w	80004d6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005da:	f7ff fe37 	bl	800024c <HAL_GetTick>
 80005de:	eba0 0008 	sub.w	r0, r0, r8
 80005e2:	2864      	cmp	r0, #100	; 0x64
 80005e4:	d9eb      	bls.n	80005be <HAL_RCC_OscConfig+0xfe>
 80005e6:	e7d2      	b.n	800058e <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005e8:	4c7e      	ldr	r4, [pc, #504]	; (80007e4 <HAL_RCC_OscConfig+0x324>)
 80005ea:	6863      	ldr	r3, [r4, #4]
 80005ec:	f013 0f0c 	tst.w	r3, #12
 80005f0:	d007      	beq.n	8000602 <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80005f2:	6863      	ldr	r3, [r4, #4]
 80005f4:	f003 030c 	and.w	r3, r3, #12
 80005f8:	2b08      	cmp	r3, #8
 80005fa:	d122      	bne.n	8000642 <HAL_RCC_OscConfig+0x182>
 80005fc:	6863      	ldr	r3, [r4, #4]
 80005fe:	03de      	lsls	r6, r3, #15
 8000600:	d41f      	bmi.n	8000642 <HAL_RCC_OscConfig+0x182>
 8000602:	2302      	movs	r3, #2
 8000604:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000608:	6821      	ldr	r1, [r4, #0]
 800060a:	fa93 f3a3 	rbit	r3, r3
 800060e:	fab3 f383 	clz	r3, r3
 8000612:	f003 031f 	and.w	r3, r3, #31
 8000616:	2201      	movs	r2, #1
 8000618:	fa02 f303 	lsl.w	r3, r2, r3
 800061c:	420b      	tst	r3, r1
 800061e:	d003      	beq.n	8000628 <HAL_RCC_OscConfig+0x168>
 8000620:	692b      	ldr	r3, [r5, #16]
 8000622:	4293      	cmp	r3, r2
 8000624:	f47f af50 	bne.w	80004c8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000628:	6821      	ldr	r1, [r4, #0]
 800062a:	23f8      	movs	r3, #248	; 0xf8
 800062c:	fa93 f3a3 	rbit	r3, r3
 8000630:	fab3 f283 	clz	r2, r3
 8000634:	696b      	ldr	r3, [r5, #20]
 8000636:	4093      	lsls	r3, r2
 8000638:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800063c:	4313      	orrs	r3, r2
 800063e:	6023      	str	r3, [r4, #0]
 8000640:	e74d      	b.n	80004de <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000642:	692a      	ldr	r2, [r5, #16]
 8000644:	2601      	movs	r6, #1
 8000646:	b30a      	cbz	r2, 800068c <HAL_RCC_OscConfig+0x1cc>
 8000648:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800064c:	fab3 f383 	clz	r3, r3
 8000650:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000654:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	2702      	movs	r7, #2
 800065c:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800065e:	f7ff fdf5 	bl	800024c <HAL_GetTick>
 8000662:	4680      	mov	r8, r0
 8000664:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000668:	6822      	ldr	r2, [r4, #0]
 800066a:	fa97 f3a7 	rbit	r3, r7
 800066e:	fab3 f383 	clz	r3, r3
 8000672:	f003 031f 	and.w	r3, r3, #31
 8000676:	fa06 f303 	lsl.w	r3, r6, r3
 800067a:	4213      	tst	r3, r2
 800067c:	d1d4      	bne.n	8000628 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800067e:	f7ff fde5 	bl	800024c <HAL_GetTick>
 8000682:	eba0 0008 	sub.w	r0, r0, r8
 8000686:	2802      	cmp	r0, #2
 8000688:	d9ec      	bls.n	8000664 <HAL_RCC_OscConfig+0x1a4>
 800068a:	e780      	b.n	800058e <HAL_RCC_OscConfig+0xce>
 800068c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000690:	fab3 f383 	clz	r3, r3
 8000694:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000698:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	2702      	movs	r7, #2
 80006a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006a2:	f7ff fdd3 	bl	800024c <HAL_GetTick>
 80006a6:	4680      	mov	r8, r0
 80006a8:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006ac:	6822      	ldr	r2, [r4, #0]
 80006ae:	fa97 f3a7 	rbit	r3, r7
 80006b2:	fab3 f383 	clz	r3, r3
 80006b6:	f003 031f 	and.w	r3, r3, #31
 80006ba:	fa06 f303 	lsl.w	r3, r6, r3
 80006be:	4213      	tst	r3, r2
 80006c0:	f43f af0d 	beq.w	80004de <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006c4:	f7ff fdc2 	bl	800024c <HAL_GetTick>
 80006c8:	eba0 0008 	sub.w	r0, r0, r8
 80006cc:	2802      	cmp	r0, #2
 80006ce:	d9eb      	bls.n	80006a8 <HAL_RCC_OscConfig+0x1e8>
 80006d0:	e75d      	b.n	800058e <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006d2:	69aa      	ldr	r2, [r5, #24]
 80006d4:	4e43      	ldr	r6, [pc, #268]	; (80007e4 <HAL_RCC_OscConfig+0x324>)
 80006d6:	4944      	ldr	r1, [pc, #272]	; (80007e8 <HAL_RCC_OscConfig+0x328>)
 80006d8:	2401      	movs	r4, #1
 80006da:	b31a      	cbz	r2, 8000724 <HAL_RCC_OscConfig+0x264>
 80006dc:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80006e0:	fab3 f383 	clz	r3, r3
 80006e4:	440b      	add	r3, r1
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	2702      	movs	r7, #2
 80006ea:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80006ec:	f7ff fdae 	bl	800024c <HAL_GetTick>
 80006f0:	4680      	mov	r8, r0
 80006f2:	fa97 f3a7 	rbit	r3, r7
 80006f6:	fa97 f3a7 	rbit	r3, r7
 80006fa:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006fe:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000700:	fa97 f3a7 	rbit	r3, r7
 8000704:	fab3 f383 	clz	r3, r3
 8000708:	f003 031f 	and.w	r3, r3, #31
 800070c:	fa04 f303 	lsl.w	r3, r4, r3
 8000710:	4213      	tst	r3, r2
 8000712:	f47f aee8 	bne.w	80004e6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000716:	f7ff fd99 	bl	800024c <HAL_GetTick>
 800071a:	eba0 0008 	sub.w	r0, r0, r8
 800071e:	2802      	cmp	r0, #2
 8000720:	d9e7      	bls.n	80006f2 <HAL_RCC_OscConfig+0x232>
 8000722:	e734      	b.n	800058e <HAL_RCC_OscConfig+0xce>
 8000724:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000728:	fab3 f383 	clz	r3, r3
 800072c:	440b      	add	r3, r1
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	2702      	movs	r7, #2
 8000732:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000734:	f7ff fd8a 	bl	800024c <HAL_GetTick>
 8000738:	4680      	mov	r8, r0
 800073a:	fa97 f3a7 	rbit	r3, r7
 800073e:	fa97 f3a7 	rbit	r3, r7
 8000742:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000746:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000748:	fa97 f3a7 	rbit	r3, r7
 800074c:	fab3 f383 	clz	r3, r3
 8000750:	f003 031f 	and.w	r3, r3, #31
 8000754:	fa04 f303 	lsl.w	r3, r4, r3
 8000758:	4213      	tst	r3, r2
 800075a:	f43f aec4 	beq.w	80004e6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800075e:	f7ff fd75 	bl	800024c <HAL_GetTick>
 8000762:	eba0 0008 	sub.w	r0, r0, r8
 8000766:	2802      	cmp	r0, #2
 8000768:	d9e7      	bls.n	800073a <HAL_RCC_OscConfig+0x27a>
 800076a:	e710      	b.n	800058e <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800076c:	4c1d      	ldr	r4, [pc, #116]	; (80007e4 <HAL_RCC_OscConfig+0x324>)
 800076e:	69e3      	ldr	r3, [r4, #28]
 8000770:	00d9      	lsls	r1, r3, #3
 8000772:	d434      	bmi.n	80007de <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	69e3      	ldr	r3, [r4, #28]
 8000776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077a:	61e3      	str	r3, [r4, #28]
 800077c:	69e3      	ldr	r3, [r4, #28]
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	9301      	str	r3, [sp, #4]
 8000784:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000786:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000788:	4f18      	ldr	r7, [pc, #96]	; (80007ec <HAL_RCC_OscConfig+0x32c>)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	05da      	lsls	r2, r3, #23
 800078e:	d52f      	bpl.n	80007f0 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000790:	68eb      	ldr	r3, [r5, #12]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d13d      	bne.n	8000812 <HAL_RCC_OscConfig+0x352>
 8000796:	6a23      	ldr	r3, [r4, #32]
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800079e:	f7ff fd55 	bl	800024c <HAL_GetTick>
 80007a2:	2702      	movs	r7, #2
 80007a4:	4682      	mov	sl, r0
 80007a6:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007a8:	f04f 0801 	mov.w	r8, #1
 80007ac:	fa97 f3a7 	rbit	r3, r7
 80007b0:	fa97 f3a7 	rbit	r3, r7
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d06c      	beq.n	8000892 <HAL_RCC_OscConfig+0x3d2>
 80007b8:	6a22      	ldr	r2, [r4, #32]
 80007ba:	fa99 f3a9 	rbit	r3, r9
 80007be:	fab3 f383 	clz	r3, r3
 80007c2:	f003 031f 	and.w	r3, r3, #31
 80007c6:	fa08 f303 	lsl.w	r3, r8, r3
 80007ca:	4213      	tst	r3, r2
 80007cc:	d058      	beq.n	8000880 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	f43f ae8d 	beq.w	80004ee <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007d4:	69e3      	ldr	r3, [r4, #28]
 80007d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007da:	61e3      	str	r3, [r4, #28]
 80007dc:	e687      	b.n	80004ee <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 80007de:	2600      	movs	r6, #0
 80007e0:	e7d2      	b.n	8000788 <HAL_RCC_OscConfig+0x2c8>
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000
 80007e8:	10908120 	.word	0x10908120
 80007ec:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80007f8:	f7ff fd28 	bl	800024c <HAL_GetTick>
 80007fc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	d4c5      	bmi.n	8000790 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000804:	f7ff fd22 	bl	800024c <HAL_GetTick>
 8000808:	eba0 0008 	sub.w	r0, r0, r8
 800080c:	2864      	cmp	r0, #100	; 0x64
 800080e:	d9f6      	bls.n	80007fe <HAL_RCC_OscConfig+0x33e>
 8000810:	e6bd      	b.n	800058e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000812:	bb3b      	cbnz	r3, 8000864 <HAL_RCC_OscConfig+0x3a4>
 8000814:	6a23      	ldr	r3, [r4, #32]
 8000816:	f023 0301 	bic.w	r3, r3, #1
 800081a:	6223      	str	r3, [r4, #32]
 800081c:	6a23      	ldr	r3, [r4, #32]
 800081e:	f023 0304 	bic.w	r3, r3, #4
 8000822:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000824:	f7ff fd12 	bl	800024c <HAL_GetTick>
 8000828:	2702      	movs	r7, #2
 800082a:	4682      	mov	sl, r0
 800082c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800082e:	f04f 0801 	mov.w	r8, #1
 8000832:	fa97 f3a7 	rbit	r3, r7
 8000836:	fa97 f3a7 	rbit	r3, r7
 800083a:	b373      	cbz	r3, 800089a <HAL_RCC_OscConfig+0x3da>
 800083c:	6a22      	ldr	r2, [r4, #32]
 800083e:	fa99 f3a9 	rbit	r3, r9
 8000842:	fab3 f383 	clz	r3, r3
 8000846:	f003 031f 	and.w	r3, r3, #31
 800084a:	fa08 f303 	lsl.w	r3, r8, r3
 800084e:	4213      	tst	r3, r2
 8000850:	d0bd      	beq.n	80007ce <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000852:	f7ff fcfb 	bl	800024c <HAL_GetTick>
 8000856:	f241 3388 	movw	r3, #5000	; 0x1388
 800085a:	eba0 000a 	sub.w	r0, r0, sl
 800085e:	4298      	cmp	r0, r3
 8000860:	d9e7      	bls.n	8000832 <HAL_RCC_OscConfig+0x372>
 8000862:	e694      	b.n	800058e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000864:	2b05      	cmp	r3, #5
 8000866:	6a23      	ldr	r3, [r4, #32]
 8000868:	d103      	bne.n	8000872 <HAL_RCC_OscConfig+0x3b2>
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	6223      	str	r3, [r4, #32]
 8000870:	e791      	b.n	8000796 <HAL_RCC_OscConfig+0x2d6>
 8000872:	f023 0301 	bic.w	r3, r3, #1
 8000876:	6223      	str	r3, [r4, #32]
 8000878:	6a23      	ldr	r3, [r4, #32]
 800087a:	f023 0304 	bic.w	r3, r3, #4
 800087e:	e78d      	b.n	800079c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000880:	f7ff fce4 	bl	800024c <HAL_GetTick>
 8000884:	f241 3388 	movw	r3, #5000	; 0x1388
 8000888:	eba0 000a 	sub.w	r0, r0, sl
 800088c:	4298      	cmp	r0, r3
 800088e:	d98d      	bls.n	80007ac <HAL_RCC_OscConfig+0x2ec>
 8000890:	e67d      	b.n	800058e <HAL_RCC_OscConfig+0xce>
 8000892:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000896:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000898:	e78f      	b.n	80007ba <HAL_RCC_OscConfig+0x2fa>
 800089a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800089e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008a0:	e7cd      	b.n	800083e <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008a2:	4c41      	ldr	r4, [pc, #260]	; (80009a8 <HAL_RCC_OscConfig+0x4e8>)
 80008a4:	6863      	ldr	r3, [r4, #4]
 80008a6:	f003 030c 	and.w	r3, r3, #12
 80008aa:	2b08      	cmp	r3, #8
 80008ac:	f43f ae0c 	beq.w	80004c8 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008b0:	2a02      	cmp	r2, #2
 80008b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008b6:	d152      	bne.n	800095e <HAL_RCC_OscConfig+0x49e>
 80008b8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008bc:	fab3 f383 	clz	r3, r3
 80008c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008ce:	f7ff fcbd 	bl	800024c <HAL_GetTick>
 80008d2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80008d6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008d8:	2601      	movs	r6, #1
 80008da:	fa97 f3a7 	rbit	r3, r7
 80008de:	6822      	ldr	r2, [r4, #0]
 80008e0:	fa97 f3a7 	rbit	r3, r7
 80008e4:	fab3 f383 	clz	r3, r3
 80008e8:	f003 031f 	and.w	r3, r3, #31
 80008ec:	fa06 f303 	lsl.w	r3, r6, r3
 80008f0:	4213      	tst	r3, r2
 80008f2:	d12d      	bne.n	8000950 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008f4:	6862      	ldr	r2, [r4, #4]
 80008f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80008f8:	6a29      	ldr	r1, [r5, #32]
 80008fa:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80008fe:	430b      	orrs	r3, r1
 8000900:	4313      	orrs	r3, r2
 8000902:	6063      	str	r3, [r4, #4]
 8000904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000908:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800090c:	fab3 f383 	clz	r3, r3
 8000910:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000914:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800091e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000920:	f7ff fc94 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000924:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000926:	4607      	mov	r7, r0
 8000928:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800092c:	6822      	ldr	r2, [r4, #0]
 800092e:	fa95 f3a5 	rbit	r3, r5
 8000932:	fab3 f383 	clz	r3, r3
 8000936:	f003 031f 	and.w	r3, r3, #31
 800093a:	fa06 f303 	lsl.w	r3, r6, r3
 800093e:	4213      	tst	r3, r2
 8000940:	f47f add9 	bne.w	80004f6 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000944:	f7ff fc82 	bl	800024c <HAL_GetTick>
 8000948:	1bc0      	subs	r0, r0, r7
 800094a:	2802      	cmp	r0, #2
 800094c:	d9ec      	bls.n	8000928 <HAL_RCC_OscConfig+0x468>
 800094e:	e61e      	b.n	800058e <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000950:	f7ff fc7c 	bl	800024c <HAL_GetTick>
 8000954:	eba0 0008 	sub.w	r0, r0, r8
 8000958:	2802      	cmp	r0, #2
 800095a:	d9be      	bls.n	80008da <HAL_RCC_OscConfig+0x41a>
 800095c:	e617      	b.n	800058e <HAL_RCC_OscConfig+0xce>
 800095e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000962:	fab3 f383 	clz	r3, r3
 8000966:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800096a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000974:	f7ff fc6a 	bl	800024c <HAL_GetTick>
 8000978:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800097c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800097e:	2601      	movs	r6, #1
 8000980:	fa95 f3a5 	rbit	r3, r5
 8000984:	6822      	ldr	r2, [r4, #0]
 8000986:	fa95 f3a5 	rbit	r3, r5
 800098a:	fab3 f383 	clz	r3, r3
 800098e:	f003 031f 	and.w	r3, r3, #31
 8000992:	fa06 f303 	lsl.w	r3, r6, r3
 8000996:	4213      	tst	r3, r2
 8000998:	f43f adad 	beq.w	80004f6 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800099c:	f7ff fc56 	bl	800024c <HAL_GetTick>
 80009a0:	1bc0      	subs	r0, r0, r7
 80009a2:	2802      	cmp	r0, #2
 80009a4:	d9ec      	bls.n	8000980 <HAL_RCC_OscConfig+0x4c0>
 80009a6:	e5f2      	b.n	800058e <HAL_RCC_OscConfig+0xce>
 80009a8:	40021000 	.word	0x40021000

080009ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009ac:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80009ae:	4c13      	ldr	r4, [pc, #76]	; (80009fc <HAL_RCC_GetSysClockFreq+0x50>)
 80009b0:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009b2:	f001 030c 	and.w	r3, r1, #12
 80009b6:	2b08      	cmp	r3, #8
 80009b8:	d11e      	bne.n	80009f8 <HAL_RCC_GetSysClockFreq+0x4c>
 80009ba:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80009be:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80009c2:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80009c6:	fab3 f383 	clz	r3, r3
 80009ca:	fa22 f303 	lsr.w	r3, r2, r3
 80009ce:	4a0c      	ldr	r2, [pc, #48]	; (8000a00 <HAL_RCC_GetSysClockFreq+0x54>)
 80009d0:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80009d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009d4:	220f      	movs	r2, #15
 80009d6:	fa92 f2a2 	rbit	r2, r2
 80009da:	fab2 f282 	clz	r2, r2
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	40d3      	lsrs	r3, r2
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_RCC_GetSysClockFreq+0x58>)
 80009e6:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80009e8:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80009ea:	bf4a      	itet	mi
 80009ec:	4b06      	ldrmi	r3, [pc, #24]	; (8000a08 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80009ee:	4b07      	ldrpl	r3, [pc, #28]	; (8000a0c <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80009f0:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80009f4:	4358      	muls	r0, r3
 80009f6:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009fa:	bd10      	pop	{r4, pc}
 80009fc:	40021000 	.word	0x40021000
 8000a00:	08001ec9 	.word	0x08001ec9
 8000a04:	08001ed9 	.word	0x08001ed9
 8000a08:	007a1200 	.word	0x007a1200
 8000a0c:	003d0900 	.word	0x003d0900

08000a10 <HAL_RCC_ClockConfig>:
{
 8000a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a14:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000a16:	4604      	mov	r4, r0
 8000a18:	b910      	cbnz	r0, 8000a20 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a20:	4a4c      	ldr	r2, [pc, #304]	; (8000b54 <HAL_RCC_ClockConfig+0x144>)
 8000a22:	6813      	ldr	r3, [r2, #0]
 8000a24:	f003 0307 	and.w	r3, r3, #7
 8000a28:	428b      	cmp	r3, r1
 8000a2a:	d32e      	bcc.n	8000a8a <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a2c:	6822      	ldr	r2, [r4, #0]
 8000a2e:	0791      	lsls	r1, r2, #30
 8000a30:	d436      	bmi.n	8000aa0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a32:	07d2      	lsls	r2, r2, #31
 8000a34:	d43c      	bmi.n	8000ab0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000a36:	4a47      	ldr	r2, [pc, #284]	; (8000b54 <HAL_RCC_ClockConfig+0x144>)
 8000a38:	6813      	ldr	r3, [r2, #0]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	429d      	cmp	r5, r3
 8000a40:	d375      	bcc.n	8000b2e <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a42:	6822      	ldr	r2, [r4, #0]
 8000a44:	4d44      	ldr	r5, [pc, #272]	; (8000b58 <HAL_RCC_ClockConfig+0x148>)
 8000a46:	f012 0f04 	tst.w	r2, #4
 8000a4a:	d17c      	bne.n	8000b46 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a4c:	0713      	lsls	r3, r2, #28
 8000a4e:	d506      	bpl.n	8000a5e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a50:	686b      	ldr	r3, [r5, #4]
 8000a52:	6922      	ldr	r2, [r4, #16]
 8000a54:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a58:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a5c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a5e:	f7ff ffa5 	bl	80009ac <HAL_RCC_GetSysClockFreq>
 8000a62:	686b      	ldr	r3, [r5, #4]
 8000a64:	22f0      	movs	r2, #240	; 0xf0
 8000a66:	fa92 f2a2 	rbit	r2, r2
 8000a6a:	fab2 f282 	clz	r2, r2
 8000a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a72:	40d3      	lsrs	r3, r2
 8000a74:	4a39      	ldr	r2, [pc, #228]	; (8000b5c <HAL_RCC_ClockConfig+0x14c>)
 8000a76:	5cd3      	ldrb	r3, [r2, r3]
 8000a78:	40d8      	lsrs	r0, r3
 8000a7a:	4b39      	ldr	r3, [pc, #228]	; (8000b60 <HAL_RCC_ClockConfig+0x150>)
 8000a7c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff fba2 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000a84:	2000      	movs	r0, #0
 8000a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a8a:	6813      	ldr	r3, [r2, #0]
 8000a8c:	f023 0307 	bic.w	r3, r3, #7
 8000a90:	430b      	orrs	r3, r1
 8000a92:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a94:	6813      	ldr	r3, [r2, #0]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	d1bd      	bne.n	8000a1a <HAL_RCC_ClockConfig+0xa>
 8000a9e:	e7c5      	b.n	8000a2c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000aa0:	492d      	ldr	r1, [pc, #180]	; (8000b58 <HAL_RCC_ClockConfig+0x148>)
 8000aa2:	68a0      	ldr	r0, [r4, #8]
 8000aa4:	684b      	ldr	r3, [r1, #4]
 8000aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000aaa:	4303      	orrs	r3, r0
 8000aac:	604b      	str	r3, [r1, #4]
 8000aae:	e7c0      	b.n	8000a32 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ab0:	6862      	ldr	r2, [r4, #4]
 8000ab2:	4e29      	ldr	r6, [pc, #164]	; (8000b58 <HAL_RCC_ClockConfig+0x148>)
 8000ab4:	2a01      	cmp	r2, #1
 8000ab6:	d127      	bne.n	8000b08 <HAL_RCC_ClockConfig+0xf8>
 8000ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000abc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ac0:	6831      	ldr	r1, [r6, #0]
 8000ac2:	fa93 f3a3 	rbit	r3, r3
 8000ac6:	fab3 f383 	clz	r3, r3
 8000aca:	f003 031f 	and.w	r3, r3, #31
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ad4:	d0a1      	beq.n	8000a1a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ad6:	6873      	ldr	r3, [r6, #4]
 8000ad8:	f023 0303 	bic.w	r3, r3, #3
 8000adc:	431a      	orrs	r2, r3
 8000ade:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000ae0:	f7ff fbb4 	bl	800024c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ae4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ae8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000aea:	6873      	ldr	r3, [r6, #4]
 8000aec:	6862      	ldr	r2, [r4, #4]
 8000aee:	f003 030c 	and.w	r3, r3, #12
 8000af2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000af6:	d09e      	beq.n	8000a36 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000af8:	f7ff fba8 	bl	800024c <HAL_GetTick>
 8000afc:	1bc0      	subs	r0, r0, r7
 8000afe:	4540      	cmp	r0, r8
 8000b00:	d9f3      	bls.n	8000aea <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000b02:	2003      	movs	r0, #3
}
 8000b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b08:	2a02      	cmp	r2, #2
 8000b0a:	bf0c      	ite	eq
 8000b0c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b10:	2302      	movne	r3, #2
 8000b12:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b16:	6830      	ldr	r0, [r6, #0]
 8000b18:	fa93 f3a3 	rbit	r3, r3
 8000b1c:	fab3 f383 	clz	r3, r3
 8000b20:	f003 031f 	and.w	r3, r3, #31
 8000b24:	2101      	movs	r1, #1
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	4203      	tst	r3, r0
 8000b2c:	e7d2      	b.n	8000ad4 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b2e:	6813      	ldr	r3, [r2, #0]
 8000b30:	f023 0307 	bic.w	r3, r3, #7
 8000b34:	432b      	orrs	r3, r5
 8000b36:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b38:	6813      	ldr	r3, [r2, #0]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	429d      	cmp	r5, r3
 8000b40:	f47f af6b 	bne.w	8000a1a <HAL_RCC_ClockConfig+0xa>
 8000b44:	e77d      	b.n	8000a42 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b46:	686b      	ldr	r3, [r5, #4]
 8000b48:	68e1      	ldr	r1, [r4, #12]
 8000b4a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b4e:	430b      	orrs	r3, r1
 8000b50:	606b      	str	r3, [r5, #4]
 8000b52:	e77b      	b.n	8000a4c <HAL_RCC_ClockConfig+0x3c>
 8000b54:	40022000 	.word	0x40022000
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	08001ef4 	.word	0x08001ef4
 8000b60:	20000008 	.word	0x20000008

08000b64 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	fa92 f2a2 	rbit	r2, r2
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b78:	40d3      	lsrs	r3, r2
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000b7c:	5cd3      	ldrb	r3, [r2, r3]
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000b80:	6810      	ldr	r0, [r2, #0]
}    
 8000b82:	40d8      	lsrs	r0, r3
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	08001f04 	.word	0x08001f04
 8000b90:	20000008 	.word	0x20000008

08000b94 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000b96:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	fa92 f2a2 	rbit	r2, r2
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000ba8:	40d3      	lsrs	r3, r2
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8000bac:	5cd3      	ldrb	r3, [r2, r3]
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000bb0:	6810      	ldr	r0, [r2, #0]
} 
 8000bb2:	40d8      	lsrs	r0, r3
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	08001f04 	.word	0x08001f04
 8000bc0:	20000008 	.word	0x20000008

08000bc4 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000bc4:	6803      	ldr	r3, [r0, #0]
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000bcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000bce:	6842      	ldr	r2, [r0, #4]
 8000bd0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000bd4:	d10a      	bne.n	8000bec <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8000bd6:	6882      	ldr	r2, [r0, #8]
 8000bd8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000bdc:	d002      	beq.n	8000be4 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000bde:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000be2:	d103      	bne.n	8000bec <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000bec:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000bee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000bf2:	d107      	bne.n	8000c04 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000c04:	2301      	movs	r3, #1
 8000c06:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8000c10:	2003      	movs	r0, #3
 8000c12:	4770      	bx	lr

08000c14 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8000c14:	b570      	push	{r4, r5, r6, lr}
 8000c16:	4605      	mov	r5, r0
 8000c18:	460c      	mov	r4, r1
 8000c1a:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000c1c:	682b      	ldr	r3, [r5, #0]
 8000c1e:	6898      	ldr	r0, [r3, #8]
 8000c20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c24:	d00d      	beq.n	8000c42 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 8000c26:	1c62      	adds	r2, r4, #1
 8000c28:	d0f9      	beq.n	8000c1e <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000c2a:	b924      	cbnz	r4, 8000c36 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 8000c2c:	4628      	mov	r0, r5
}
 8000c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000c32:	f7ff bfc7 	b.w	8000bc4 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000c36:	f7ff fb09 	bl	800024c <HAL_GetTick>
 8000c3a:	1b80      	subs	r0, r0, r6
 8000c3c:	4284      	cmp	r4, r0
 8000c3e:	d8ed      	bhi.n	8000c1c <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8000c40:	e7f4      	b.n	8000c2c <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 8000c42:	bd70      	pop	{r4, r5, r6, pc}

08000c44 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c46:	4606      	mov	r6, r0
 8000c48:	460c      	mov	r4, r1
 8000c4a:	4615      	mov	r5, r2
 8000c4c:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8000c4e:	6831      	ldr	r1, [r6, #0]
 8000c50:	6888      	ldr	r0, [r1, #8]
 8000c52:	4020      	ands	r0, r4
 8000c54:	d00e      	beq.n	8000c74 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000c56:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000c5a:	bf01      	itttt	eq
 8000c5c:	7b0a      	ldrbeq	r2, [r1, #12]
 8000c5e:	b2d2      	uxtbeq	r2, r2
 8000c60:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 8000c64:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 8000c68:	1c6b      	adds	r3, r5, #1
 8000c6a:	d0f1      	beq.n	8000c50 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000c6c:	b925      	cbnz	r5, 8000c78 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 8000c6e:	4630      	mov	r0, r6
 8000c70:	f7ff ffa8 	bl	8000bc4 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8000c74:	b003      	add	sp, #12
 8000c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000c78:	f7ff fae8 	bl	800024c <HAL_GetTick>
 8000c7c:	1bc0      	subs	r0, r0, r7
 8000c7e:	4285      	cmp	r5, r0
 8000c80:	d8e5      	bhi.n	8000c4e <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8000c82:	e7f4      	b.n	8000c6e <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

08000c84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000c84:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000c86:	4613      	mov	r3, r2
{
 8000c88:	460d      	mov	r5, r1
 8000c8a:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000c8c:	460a      	mov	r2, r1
 8000c8e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8000c92:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000c94:	f7ff ffd6 	bl	8000c44 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8000c98:	b128      	cbz	r0, 8000ca6 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c9a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000c9c:	f043 0320 	orr.w	r3, r3, #32
 8000ca0:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8000ca2:	2003      	movs	r0, #3
 8000ca4:	e00f      	b.n	8000cc6 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000ca6:	4632      	mov	r2, r6
 8000ca8:	4629      	mov	r1, r5
 8000caa:	4620      	mov	r0, r4
 8000cac:	f7ff ffb2 	bl	8000c14 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	d1f2      	bne.n	8000c9a <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000cb4:	4633      	mov	r3, r6
 8000cb6:	462a      	mov	r2, r5
 8000cb8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	f7ff ffc1 	bl	8000c44 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	d1e9      	bne.n	8000c9a <SPI_EndRxTxTransaction+0x16>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8000cc6:	bd70      	pop	{r4, r5, r6, pc}

08000cc8 <SPI_EndRxTransaction>:
{
 8000cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000cca:	6843      	ldr	r3, [r0, #4]
 8000ccc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460e      	mov	r6, r1
 8000cd4:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000cd6:	d10b      	bne.n	8000cf0 <SPI_EndRxTransaction+0x28>
 8000cd8:	6883      	ldr	r3, [r0, #8]
 8000cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cde:	d002      	beq.n	8000ce6 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce4:	d104      	bne.n	8000cf0 <SPI_EndRxTransaction+0x28>
    __HAL_SPI_DISABLE(hspi);
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cee:	601a      	str	r2, [r3, #0]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000cf0:	463a      	mov	r2, r7
 8000cf2:	4631      	mov	r1, r6
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f7ff ff8d 	bl	8000c14 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8000cfa:	4605      	mov	r5, r0
 8000cfc:	b128      	cbz	r0, 8000d0a <SPI_EndRxTransaction+0x42>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000cfe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000d00:	f043 0320 	orr.w	r3, r3, #32
 8000d04:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8000d06:	2503      	movs	r5, #3
 8000d08:	e013      	b.n	8000d32 <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000d0a:	6863      	ldr	r3, [r4, #4]
 8000d0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000d10:	d10f      	bne.n	8000d32 <SPI_EndRxTransaction+0x6a>
 8000d12:	68a3      	ldr	r3, [r4, #8]
 8000d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d18:	d002      	beq.n	8000d20 <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d1e:	d108      	bne.n	8000d32 <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000d20:	463b      	mov	r3, r7
 8000d22:	4632      	mov	r2, r6
 8000d24:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f7ff ff8b 	bl	8000c44 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d1e5      	bne.n	8000cfe <SPI_EndRxTransaction+0x36>
}
 8000d32:	4628      	mov	r0, r5
 8000d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000d36 <HAL_SPI_Init>:
{
 8000d36:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8000d38:	4604      	mov	r4, r0
 8000d3a:	2800      	cmp	r0, #0
 8000d3c:	d04a      	beq.n	8000dd4 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000d42:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8000d46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d4a:	b91b      	cbnz	r3, 8000d54 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000d4c:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8000d50:	f000 ff64 	bl	8001c1c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d54:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000d56:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d58:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8000d5c:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000d5e:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8000d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000d64:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8000d68:	600b      	str	r3, [r1, #0]
 8000d6a:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000d6e:	d92e      	bls.n	8000dce <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000d70:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000d72:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d76:	bf18      	it	ne
 8000d78:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8000d7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d7c:	b92b      	cbnz	r3, 8000d8a <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000d7e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8000d82:	bf8c      	ite	hi
 8000d84:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000d86:	2301      	movls	r3, #1
 8000d88:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8000d8a:	68a6      	ldr	r6, [r4, #8]
 8000d8c:	6863      	ldr	r3, [r4, #4]
 8000d8e:	69a5      	ldr	r5, [r4, #24]
 8000d90:	4333      	orrs	r3, r6
 8000d92:	6926      	ldr	r6, [r4, #16]
 8000d94:	4333      	orrs	r3, r6
 8000d96:	6966      	ldr	r6, [r4, #20]
 8000d98:	4333      	orrs	r3, r6
 8000d9a:	69e6      	ldr	r6, [r4, #28]
 8000d9c:	4333      	orrs	r3, r6
 8000d9e:	6a26      	ldr	r6, [r4, #32]
 8000da0:	4333      	orrs	r3, r6
 8000da2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000da4:	4333      	orrs	r3, r6
 8000da6:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8000daa:	4333      	orrs	r3, r6
 8000dac:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000db0:	431a      	orrs	r2, r3
 8000db2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000db4:	0c2d      	lsrs	r5, r5, #16
 8000db6:	431a      	orrs	r2, r3
 8000db8:	f005 0504 	and.w	r5, r5, #4
 8000dbc:	432a      	orrs	r2, r5
 8000dbe:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8000dc0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dc2:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000dc4:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dc6:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000dc8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8000dcc:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000dce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000dd2:	e7d0      	b.n	8000d76 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8000dd4:	2001      	movs	r0, #1
}
 8000dd6:	bd70      	pop	{r4, r5, r6, pc}

08000dd8 <HAL_SPI_Transmit>:
{
 8000dd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000ddc:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000dde:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8000de2:	2b01      	cmp	r3, #1
{
 8000de4:	4604      	mov	r4, r0
 8000de6:	460d      	mov	r5, r1
 8000de8:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000dea:	f000 80b1 	beq.w	8000f50 <HAL_SPI_Transmit+0x178>
 8000dee:	2301      	movs	r3, #1
 8000df0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8000df4:	f7ff fa2a 	bl	800024c <HAL_GetTick>
 8000df8:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000dfa:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8000dfe:	b2c0      	uxtb	r0, r0
 8000e00:	2801      	cmp	r0, #1
 8000e02:	f040 80a3 	bne.w	8000f4c <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d057      	beq.n	8000eba <HAL_SPI_Transmit+0xe2>
 8000e0a:	f1b8 0f00 	cmp.w	r8, #0
 8000e0e:	d054      	beq.n	8000eba <HAL_SPI_Transmit+0xe2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000e10:	2303      	movs	r3, #3
 8000e12:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000e1a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8000e1c:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8000e20:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8000e24:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8000e28:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8000e2a:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e2c:	68a3      	ldr	r3, [r4, #8]
 8000e2e:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000e30:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8000e36:	bf08      	it	eq
 8000e38:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8000e3a:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8000e3e:	bf04      	itt	eq
 8000e40:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8000e44:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000e46:	6803      	ldr	r3, [r0, #0]
 8000e48:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8000e4a:	bf5e      	ittt	pl
 8000e4c:	6803      	ldrpl	r3, [r0, #0]
 8000e4e:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8000e52:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000e54:	68e3      	ldr	r3, [r4, #12]
 8000e56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000e5a:	6863      	ldr	r3, [r4, #4]
 8000e5c:	d93e      	bls.n	8000edc <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000e5e:	b11b      	cbz	r3, 8000e68 <HAL_SPI_Transmit+0x90>
 8000e60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d106      	bne.n	8000e76 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)pData);
 8000e68:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000e6c:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8000e6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e70:	3b01      	subs	r3, #1
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8000e76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	b9a3      	cbnz	r3, 8000ea6 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000e7c:	463a      	mov	r2, r7
 8000e7e:	4631      	mov	r1, r6
 8000e80:	4620      	mov	r0, r4
 8000e82:	f7ff feff 	bl	8000c84 <SPI_EndRxTxTransaction>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d15d      	bne.n	8000f46 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000e8a:	68a3      	ldr	r3, [r4, #8]
 8000e8c:	b933      	cbnz	r3, 8000e9c <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	9201      	str	r2, [sp, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000e9c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8000e9e:	3000      	adds	r0, #0
 8000ea0:	bf18      	it	ne
 8000ea2:	2001      	movne	r0, #1
 8000ea4:	e009      	b.n	8000eba <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	0790      	lsls	r0, r2, #30
 8000eac:	d503      	bpl.n	8000eb6 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)pData);
 8000eae:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	e7db      	b.n	8000e6e <HAL_SPI_Transmit+0x96>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000eb6:	b94e      	cbnz	r6, 8000ecc <HAL_SPI_Transmit+0xf4>
          errorcode = HAL_TIMEOUT;
 8000eb8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8000ec6:	b002      	add	sp, #8
 8000ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000ecc:	1c71      	adds	r1, r6, #1
 8000ece:	d0d2      	beq.n	8000e76 <HAL_SPI_Transmit+0x9e>
 8000ed0:	f7ff f9bc 	bl	800024c <HAL_GetTick>
 8000ed4:	1bc0      	subs	r0, r0, r7
 8000ed6:	4286      	cmp	r6, r0
 8000ed8:	d8cd      	bhi.n	8000e76 <HAL_SPI_Transmit+0x9e>
 8000eda:	e7ed      	b.n	8000eb8 <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000edc:	b11b      	cbz	r3, 8000ee6 <HAL_SPI_Transmit+0x10e>
 8000ede:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d10a      	bne.n	8000efc <HAL_SPI_Transmit+0x124>
      if (hspi->TxXferCount > 1U)
 8000ee6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d916      	bls.n	8000f1c <HAL_SPI_Transmit+0x144>
        hspi->Instance->DR = *((uint16_t *)pData);
 8000eee:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000ef2:	60c3      	str	r3, [r0, #12]
          hspi->TxXferCount -= 2U;
 8000ef4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ef6:	3b02      	subs	r3, #2
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8000efc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0bb      	beq.n	8000e7c <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	0792      	lsls	r2, r2, #30
 8000f0a:	d512      	bpl.n	8000f32 <HAL_SPI_Transmit+0x15a>
        if (hspi->TxXferCount > 1U)
 8000f0c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	2a01      	cmp	r2, #1
 8000f12:	d90b      	bls.n	8000f2c <HAL_SPI_Transmit+0x154>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000f14:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	e7eb      	b.n	8000ef4 <HAL_SPI_Transmit+0x11c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8000f1c:	782b      	ldrb	r3, [r5, #0]
 8000f1e:	7303      	strb	r3, [r0, #12]
          hspi->TxXferCount--;
 8000f20:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f22:	3b01      	subs	r3, #1
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8000f28:	3501      	adds	r5, #1
 8000f2a:	e7e7      	b.n	8000efc <HAL_SPI_Transmit+0x124>
 8000f2c:	782a      	ldrb	r2, [r5, #0]
 8000f2e:	731a      	strb	r2, [r3, #12]
 8000f30:	e7f6      	b.n	8000f20 <HAL_SPI_Transmit+0x148>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000f32:	2e00      	cmp	r6, #0
 8000f34:	d0c0      	beq.n	8000eb8 <HAL_SPI_Transmit+0xe0>
 8000f36:	1c73      	adds	r3, r6, #1
 8000f38:	d0e0      	beq.n	8000efc <HAL_SPI_Transmit+0x124>
 8000f3a:	f7ff f987 	bl	800024c <HAL_GetTick>
 8000f3e:	1bc0      	subs	r0, r0, r7
 8000f40:	4286      	cmp	r6, r0
 8000f42:	d8db      	bhi.n	8000efc <HAL_SPI_Transmit+0x124>
 8000f44:	e7b8      	b.n	8000eb8 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000f46:	2320      	movs	r3, #32
 8000f48:	6623      	str	r3, [r4, #96]	; 0x60
 8000f4a:	e79e      	b.n	8000e8a <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	e7b4      	b.n	8000eba <HAL_SPI_Transmit+0xe2>
  __HAL_LOCK(hspi);
 8000f50:	2002      	movs	r0, #2
 8000f52:	e7b8      	b.n	8000ec6 <HAL_SPI_Transmit+0xee>

08000f54 <HAL_SPI_TransmitReceive>:
{
 8000f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f58:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8000f5a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8000f5e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8000f62:	2b01      	cmp	r3, #1
{
 8000f64:	4604      	mov	r4, r0
 8000f66:	460d      	mov	r5, r1
 8000f68:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 8000f6a:	f000 811c 	beq.w	80011a6 <HAL_SPI_TransmitReceive+0x252>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8000f74:	f7ff f96a 	bl	800024c <HAL_GetTick>
  tmp  = hspi->State;
 8000f78:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 8000f7c:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8000f7e:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8000f80:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000f82:	4681      	mov	r9, r0
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8000f84:	d00a      	beq.n	8000f9c <HAL_SPI_TransmitReceive+0x48>
 8000f86:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000f8a:	f040 8108 	bne.w	800119e <HAL_SPI_TransmitReceive+0x24a>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000f8e:	68a2      	ldr	r2, [r4, #8]
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	f040 8104 	bne.w	800119e <HAL_SPI_TransmitReceive+0x24a>
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	f040 8101 	bne.w	800119e <HAL_SPI_TransmitReceive+0x24a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000f9c:	2d00      	cmp	r5, #0
 8000f9e:	f000 8100 	beq.w	80011a2 <HAL_SPI_TransmitReceive+0x24e>
 8000fa2:	2e00      	cmp	r6, #0
 8000fa4:	f000 80fd 	beq.w	80011a2 <HAL_SPI_TransmitReceive+0x24e>
 8000fa8:	2f00      	cmp	r7, #0
 8000faa:	f000 80fa 	beq.w	80011a2 <HAL_SPI_TransmitReceive+0x24e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000fae:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8000fb2:	68e0      	ldr	r0, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000fb4:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000fb6:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000fb8:	bf1c      	itt	ne
 8000fba:	2305      	movne	r3, #5
 8000fbc:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fc0:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8000fc2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fc6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8000fc8:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 8000fca:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8000fce:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 8000fd0:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000fd4:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000fd6:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8000fd8:	87a7      	strh	r7, [r4, #60]	; 0x3c
 8000fda:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8000fdc:	d804      	bhi.n	8000fe8 <HAL_SPI_TransmitReceive+0x94>
 8000fde:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8000fe2:	b292      	uxth	r2, r2
 8000fe4:	2a01      	cmp	r2, #1
 8000fe6:	d92e      	bls.n	8001046 <HAL_SPI_TransmitReceive+0xf2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000fee:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000ff4:	bf5e      	ittt	pl
 8000ff6:	681a      	ldrpl	r2, [r3, #0]
 8000ff8:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000ffc:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000ffe:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8001002:	d958      	bls.n	80010b6 <HAL_SPI_TransmitReceive+0x162>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001004:	b119      	cbz	r1, 800100e <HAL_SPI_TransmitReceive+0xba>
 8001006:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001008:	b292      	uxth	r2, r2
 800100a:	2a01      	cmp	r2, #1
 800100c:	d106      	bne.n	800101c <HAL_SPI_TransmitReceive+0xc8>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800100e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001012:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001014:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001016:	3b01      	subs	r3, #1
 8001018:	b29b      	uxth	r3, r3
 800101a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800101c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800101e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001020:	b29b      	uxth	r3, r3
 8001022:	b9a3      	cbnz	r3, 800104e <HAL_SPI_TransmitReceive+0xfa>
 8001024:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001028:	b29b      	uxth	r3, r3
 800102a:	b983      	cbnz	r3, 800104e <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800102c:	464a      	mov	r2, r9
 800102e:	4641      	mov	r1, r8
 8001030:	4620      	mov	r0, r4
 8001032:	f7ff fe27 	bl	8000c84 <SPI_EndRxTxTransaction>
 8001036:	2800      	cmp	r0, #0
 8001038:	f040 80ae 	bne.w	8001198 <HAL_SPI_TransmitReceive+0x244>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800103c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800103e:	3000      	adds	r0, #0
 8001040:	bf18      	it	ne
 8001042:	2001      	movne	r0, #1
 8001044:	e02f      	b.n	80010a6 <HAL_SPI_TransmitReceive+0x152>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800104c:	e7cf      	b.n	8000fee <HAL_SPI_TransmitReceive+0x9a>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800104e:	b177      	cbz	r7, 800106e <HAL_SPI_TransmitReceive+0x11a>
 8001050:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001052:	b29b      	uxth	r3, r3
 8001054:	b15b      	cbz	r3, 800106e <HAL_SPI_TransmitReceive+0x11a>
 8001056:	6823      	ldr	r3, [r4, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	0792      	lsls	r2, r2, #30
 800105c:	d507      	bpl.n	800106e <HAL_SPI_TransmitReceive+0x11a>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800105e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001062:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001064:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001066:	3b01      	subs	r3, #1
 8001068:	b29b      	uxth	r3, r3
 800106a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800106c:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800106e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001072:	b29b      	uxth	r3, r3
 8001074:	b16b      	cbz	r3, 8001092 <HAL_SPI_TransmitReceive+0x13e>
 8001076:	6823      	ldr	r3, [r4, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	07d0      	lsls	r0, r2, #31
 800107c:	d509      	bpl.n	8001092 <HAL_SPI_TransmitReceive+0x13e>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001084:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001088:	3b01      	subs	r3, #1
 800108a:	b29b      	uxth	r3, r3
 800108c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8001090:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001092:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001096:	d0c2      	beq.n	800101e <HAL_SPI_TransmitReceive+0xca>
 8001098:	f7ff f8d8 	bl	800024c <HAL_GetTick>
 800109c:	eba0 0009 	sub.w	r0, r0, r9
 80010a0:	4580      	cmp	r8, r0
 80010a2:	d8bc      	bhi.n	800101e <HAL_SPI_TransmitReceive+0xca>
        errorcode = HAL_TIMEOUT;
 80010a4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80010a6:	2301      	movs	r3, #1
 80010a8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80010ac:	2300      	movs	r3, #0
 80010ae:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80010b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80010b6:	b119      	cbz	r1, 80010c0 <HAL_SPI_TransmitReceive+0x16c>
 80010b8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80010ba:	b292      	uxth	r2, r2
 80010bc:	2a01      	cmp	r2, #1
 80010be:	d10a      	bne.n	80010d6 <HAL_SPI_TransmitReceive+0x182>
      if (hspi->TxXferCount > 1U)
 80010c0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80010c2:	b292      	uxth	r2, r2
 80010c4:	2a01      	cmp	r2, #1
 80010c6:	d94d      	bls.n	8001164 <HAL_SPI_TransmitReceive+0x210>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80010c8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80010cc:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80010ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010d0:	3b02      	subs	r3, #2
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80010d6:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80010d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010da:	b29b      	uxth	r3, r3
 80010dc:	b923      	cbnz	r3, 80010e8 <HAL_SPI_TransmitReceive+0x194>
 80010de:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0a1      	beq.n	800102c <HAL_SPI_TransmitReceive+0xd8>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80010e8:	b197      	cbz	r7, 8001110 <HAL_SPI_TransmitReceive+0x1bc>
 80010ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	b17b      	cbz	r3, 8001110 <HAL_SPI_TransmitReceive+0x1bc>
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	0791      	lsls	r1, r2, #30
 80010f6:	d50b      	bpl.n	8001110 <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 80010f8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80010fa:	b292      	uxth	r2, r2
 80010fc:	2a01      	cmp	r2, #1
 80010fe:	d939      	bls.n	8001174 <HAL_SPI_TransmitReceive+0x220>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8001100:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001104:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8001106:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001108:	3b02      	subs	r3, #2
 800110a:	b29b      	uxth	r3, r3
 800110c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800110e:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001110:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001114:	b29b      	uxth	r3, r3
 8001116:	b1db      	cbz	r3, 8001150 <HAL_SPI_TransmitReceive+0x1fc>
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	07d2      	lsls	r2, r2, #31
 800111e:	d517      	bpl.n	8001150 <HAL_SPI_TransmitReceive+0x1fc>
        if (hspi->RxXferCount > 1U)
 8001120:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001124:	b292      	uxth	r2, r2
 8001126:	2a01      	cmp	r2, #1
 8001128:	d92c      	bls.n	8001184 <HAL_SPI_TransmitReceive+0x230>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	f826 2b02 	strh.w	r2, [r6], #2
          hspi->RxXferCount -= 2U;
 8001130:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001134:	3a02      	subs	r2, #2
 8001136:	b292      	uxth	r2, r2
 8001138:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800113c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001140:	b292      	uxth	r2, r2
 8001142:	2a01      	cmp	r2, #1
 8001144:	d803      	bhi.n	800114e <HAL_SPI_TransmitReceive+0x1fa>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800114c:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 800114e:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001150:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001154:	d0c0      	beq.n	80010d8 <HAL_SPI_TransmitReceive+0x184>
 8001156:	f7ff f879 	bl	800024c <HAL_GetTick>
 800115a:	eba0 0009 	sub.w	r0, r0, r9
 800115e:	4580      	cmp	r8, r0
 8001160:	d8ba      	bhi.n	80010d8 <HAL_SPI_TransmitReceive+0x184>
 8001162:	e79f      	b.n	80010a4 <HAL_SPI_TransmitReceive+0x150>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001164:	782a      	ldrb	r2, [r5, #0]
 8001166:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001168:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800116a:	3b01      	subs	r3, #1
 800116c:	b29b      	uxth	r3, r3
 800116e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001170:	3501      	adds	r5, #1
 8001172:	e7b0      	b.n	80010d6 <HAL_SPI_TransmitReceive+0x182>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001174:	782a      	ldrb	r2, [r5, #0]
 8001176:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8001178:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800117a:	3b01      	subs	r3, #1
 800117c:	b29b      	uxth	r3, r3
 800117e:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001180:	3501      	adds	r5, #1
 8001182:	e7c4      	b.n	800110e <HAL_SPI_TransmitReceive+0x1ba>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001184:	7b1b      	ldrb	r3, [r3, #12]
 8001186:	7033      	strb	r3, [r6, #0]
          hspi->RxXferCount--;
 8001188:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800118c:	3b01      	subs	r3, #1
 800118e:	b29b      	uxth	r3, r3
 8001190:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001194:	3601      	adds	r6, #1
 8001196:	e7da      	b.n	800114e <HAL_SPI_TransmitReceive+0x1fa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001198:	2320      	movs	r3, #32
 800119a:	6623      	str	r3, [r4, #96]	; 0x60
 800119c:	e74e      	b.n	800103c <HAL_SPI_TransmitReceive+0xe8>
    errorcode = HAL_BUSY;
 800119e:	2002      	movs	r0, #2
 80011a0:	e781      	b.n	80010a6 <HAL_SPI_TransmitReceive+0x152>
    errorcode = HAL_ERROR;
 80011a2:	2001      	movs	r0, #1
 80011a4:	e77f      	b.n	80010a6 <HAL_SPI_TransmitReceive+0x152>
  __HAL_LOCK(hspi);
 80011a6:	2002      	movs	r0, #2
}
 80011a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080011ac <HAL_SPI_Receive>:
{
 80011ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80011b0:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80011b2:	6843      	ldr	r3, [r0, #4]
 80011b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80011b8:	4604      	mov	r4, r0
 80011ba:	460e      	mov	r6, r1
 80011bc:	4690      	mov	r8, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80011be:	d10c      	bne.n	80011da <HAL_SPI_Receive+0x2e>
 80011c0:	6883      	ldr	r3, [r0, #8]
 80011c2:	b953      	cbnz	r3, 80011da <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80011c4:	2304      	movs	r3, #4
 80011c6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80011ca:	4613      	mov	r3, r2
 80011cc:	9500      	str	r5, [sp, #0]
 80011ce:	460a      	mov	r2, r1
 80011d0:	f7ff fec0 	bl	8000f54 <HAL_SPI_TransmitReceive>
}
 80011d4:	b002      	add	sp, #8
 80011d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 80011da:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80011de:	2b01      	cmp	r3, #1
 80011e0:	f000 808b 	beq.w	80012fa <HAL_SPI_Receive+0x14e>
 80011e4:	2301      	movs	r3, #1
 80011e6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80011ea:	f7ff f82f 	bl	800024c <HAL_GetTick>
 80011ee:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80011f0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80011f4:	b2c0      	uxtb	r0, r0
 80011f6:	2801      	cmp	r0, #1
 80011f8:	d17d      	bne.n	80012f6 <HAL_SPI_Receive+0x14a>
  if ((pData == NULL) || (Size == 0U))
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	d05f      	beq.n	80012be <HAL_SPI_Receive+0x112>
 80011fe:	f1b8 0f00 	cmp.w	r8, #0
 8001202:	d05c      	beq.n	80012be <HAL_SPI_Receive+0x112>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001204:	2304      	movs	r3, #4
 8001206:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 800120a:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800120c:	68e2      	ldr	r2, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800120e:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001210:	2300      	movs	r3, #0
 8001212:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8001214:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8001218:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800121a:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800121c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800121e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001220:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001222:	684b      	ldr	r3, [r1, #4]
  hspi->RxXferSize  = Size;
 8001224:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001228:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800122c:	bf8c      	ite	hi
 800122e:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001232:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 8001236:	604b      	str	r3, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001238:	68a3      	ldr	r3, [r4, #8]
 800123a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 800123e:	bf02      	ittt	eq
 8001240:	680b      	ldreq	r3, [r1, #0]
 8001242:	f423 4380 	biceq.w	r3, r3, #16384	; 0x4000
 8001246:	600b      	streq	r3, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001248:	680b      	ldr	r3, [r1, #0]
 800124a:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800124c:	bf5e      	ittt	pl
 800124e:	680b      	ldrpl	r3, [r1, #0]
 8001250:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001254:	600b      	strpl	r3, [r1, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001256:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800125a:	d91e      	bls.n	800129a <HAL_SPI_Receive+0xee>
    while (hspi->RxXferCount > 0U)
 800125c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001260:	b29b      	uxth	r3, r3
 8001262:	b1fb      	cbz	r3, 80012a4 <HAL_SPI_Receive+0xf8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001264:	6823      	ldr	r3, [r4, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	07d2      	lsls	r2, r2, #31
 800126a:	d537      	bpl.n	80012dc <HAL_SPI_Receive+0x130>
        *((uint16_t *)pData) = hspi->Instance->DR;
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001272:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001276:	3b01      	subs	r3, #1
 8001278:	b29b      	uxth	r3, r3
 800127a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800127e:	e7ed      	b.n	800125c <HAL_SPI_Receive+0xb0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	07d0      	lsls	r0, r2, #31
 8001286:	d518      	bpl.n	80012ba <HAL_SPI_Receive+0x10e>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001288:	7b1b      	ldrb	r3, [r3, #12]
 800128a:	f806 3b01 	strb.w	r3, [r6], #1
        hspi->RxXferCount--;
 800128e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001292:	3b01      	subs	r3, #1
 8001294:	b29b      	uxth	r3, r3
 8001296:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 800129a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800129e:	b29b      	uxth	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1ed      	bne.n	8001280 <HAL_SPI_Receive+0xd4>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80012a4:	463a      	mov	r2, r7
 80012a6:	4629      	mov	r1, r5
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff fd0d 	bl	8000cc8 <SPI_EndRxTransaction>
 80012ae:	b9f8      	cbnz	r0, 80012f0 <HAL_SPI_Receive+0x144>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80012b0:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80012b2:	3000      	adds	r0, #0
 80012b4:	bf18      	it	ne
 80012b6:	2001      	movne	r0, #1
 80012b8:	e001      	b.n	80012be <HAL_SPI_Receive+0x112>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80012ba:	b93d      	cbnz	r5, 80012cc <HAL_SPI_Receive+0x120>
          errorcode = HAL_TIMEOUT;
 80012bc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80012be:	2301      	movs	r3, #1
 80012c0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80012c4:	2300      	movs	r3, #0
 80012c6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 80012ca:	e783      	b.n	80011d4 <HAL_SPI_Receive+0x28>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80012cc:	1c69      	adds	r1, r5, #1
 80012ce:	d0e4      	beq.n	800129a <HAL_SPI_Receive+0xee>
 80012d0:	f7fe ffbc 	bl	800024c <HAL_GetTick>
 80012d4:	1bc0      	subs	r0, r0, r7
 80012d6:	4285      	cmp	r5, r0
 80012d8:	d8df      	bhi.n	800129a <HAL_SPI_Receive+0xee>
 80012da:	e7ef      	b.n	80012bc <HAL_SPI_Receive+0x110>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80012dc:	2d00      	cmp	r5, #0
 80012de:	d0ed      	beq.n	80012bc <HAL_SPI_Receive+0x110>
 80012e0:	1c6b      	adds	r3, r5, #1
 80012e2:	d0bb      	beq.n	800125c <HAL_SPI_Receive+0xb0>
 80012e4:	f7fe ffb2 	bl	800024c <HAL_GetTick>
 80012e8:	1bc0      	subs	r0, r0, r7
 80012ea:	4285      	cmp	r5, r0
 80012ec:	d8b6      	bhi.n	800125c <HAL_SPI_Receive+0xb0>
 80012ee:	e7e5      	b.n	80012bc <HAL_SPI_Receive+0x110>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80012f0:	2320      	movs	r3, #32
 80012f2:	6623      	str	r3, [r4, #96]	; 0x60
 80012f4:	e7dc      	b.n	80012b0 <HAL_SPI_Receive+0x104>
    errorcode = HAL_BUSY;
 80012f6:	2002      	movs	r0, #2
 80012f8:	e7e1      	b.n	80012be <HAL_SPI_Receive+0x112>
  __HAL_LOCK(hspi);
 80012fa:	2002      	movs	r0, #2
 80012fc:	e76a      	b.n	80011d4 <HAL_SPI_Receive+0x28>
	...

08001300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001300:	b538      	push	{r3, r4, r5, lr}
 8001302:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001304:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001306:	6921      	ldr	r1, [r4, #16]
 8001308:	68a3      	ldr	r3, [r4, #8]
 800130a:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800130c:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800130e:	430b      	orrs	r3, r1
 8001310:	6961      	ldr	r1, [r4, #20]
 8001312:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001314:	4949      	ldr	r1, [pc, #292]	; (800143c <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001316:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001318:	4001      	ands	r1, r0
 800131a:	430b      	orrs	r3, r1
 800131c:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800131e:	686b      	ldr	r3, [r5, #4]
 8001320:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001322:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001324:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001328:	430b      	orrs	r3, r1
 800132a:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800132c:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800132e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001330:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001334:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001336:	430b      	orrs	r3, r1
 8001338:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800133a:	4b41      	ldr	r3, [pc, #260]	; (8001440 <UART_SetConfig+0x140>)
 800133c:	429d      	cmp	r5, r3
 800133e:	d112      	bne.n	8001366 <UART_SetConfig+0x66>
 8001340:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001344:	493f      	ldr	r1, [pc, #252]	; (8001444 <UART_SetConfig+0x144>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800134c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001350:	5ccb      	ldrb	r3, [r1, r3]
 8001352:	d13b      	bne.n	80013cc <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 8001354:	2b08      	cmp	r3, #8
 8001356:	d836      	bhi.n	80013c6 <UART_SetConfig+0xc6>
 8001358:	e8df f003 	tbb	[pc, r3]
 800135c:	3524210f 	.word	0x3524210f
 8001360:	3535352d 	.word	0x3535352d
 8001364:	30          	.byte	0x30
 8001365:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <UART_SetConfig+0x148>)
 8001368:	429d      	cmp	r5, r3
 800136a:	d003      	beq.n	8001374 <UART_SetConfig+0x74>
 800136c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001370:	429d      	cmp	r5, r3
 8001372:	d15e      	bne.n	8001432 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001374:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001378:	d131      	bne.n	80013de <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800137a:	f7ff fbf3 	bl	8000b64 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800137e:	6861      	ldr	r1, [r4, #4]
 8001380:	084a      	lsrs	r2, r1, #1
 8001382:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001386:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800138a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800138c:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 800138e:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 8001392:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001394:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001398:	4313      	orrs	r3, r2
 800139a:	60cb      	str	r3, [r1, #12]
 800139c:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800139e:	f7ff fbf9 	bl	8000b94 <HAL_RCC_GetPCLK2Freq>
 80013a2:	e7ec      	b.n	800137e <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80013a4:	6860      	ldr	r0, [r4, #4]
 80013a6:	0843      	lsrs	r3, r0, #1
 80013a8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80013ac:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80013b0:	fbb3 f3f0 	udiv	r3, r3, r0
 80013b4:	e7e9      	b.n	800138a <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80013b6:	f7ff faf9 	bl	80009ac <HAL_RCC_GetSysClockFreq>
 80013ba:	e7e0      	b.n	800137e <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80013bc:	6860      	ldr	r0, [r4, #4]
 80013be:	0843      	lsrs	r3, r0, #1
 80013c0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80013c4:	e7f4      	b.n	80013b0 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 80013c6:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e7e0      	b.n	800138e <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d833      	bhi.n	8001438 <UART_SetConfig+0x138>
 80013d0:	e8df f003 	tbb	[pc, r3]
 80013d4:	321b1005 	.word	0x321b1005
 80013d8:	32323227 	.word	0x32323227
 80013dc:	2a          	.byte	0x2a
 80013dd:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80013de:	f7ff fbc1 	bl	8000b64 <HAL_RCC_GetPCLK1Freq>
 80013e2:	6863      	ldr	r3, [r4, #4]
 80013e4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80013e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80013ec:	b280      	uxth	r0, r0
 80013ee:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80013f0:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 80013f2:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80013f4:	f7ff fbce 	bl	8000b94 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80013f8:	6863      	ldr	r3, [r4, #4]
 80013fa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80013fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <UART_SetConfig+0x140>)
 8001404:	b280      	uxth	r0, r0
 8001406:	60d8      	str	r0, [r3, #12]
 8001408:	e7f2      	b.n	80013f0 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800140a:	6862      	ldr	r2, [r4, #4]
 800140c:	0853      	lsrs	r3, r2, #1
 800140e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001412:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001416:	fbb3 f3f2 	udiv	r3, r3, r2
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <UART_SetConfig+0x140>)
 800141c:	b29b      	uxth	r3, r3
 800141e:	60d3      	str	r3, [r2, #12]
 8001420:	e7e6      	b.n	80013f0 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001422:	f7ff fac3 	bl	80009ac <HAL_RCC_GetSysClockFreq>
 8001426:	e7e7      	b.n	80013f8 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001428:	6862      	ldr	r2, [r4, #4]
 800142a:	0853      	lsrs	r3, r2, #1
 800142c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001430:	e7f1      	b.n	8001416 <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001432:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001436:	d0c6      	beq.n	80013c6 <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001438:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 800143a:	bd38      	pop	{r3, r4, r5, pc}
 800143c:	efff69f3 	.word	0xefff69f3
 8001440:	40013800 	.word	0x40013800
 8001444:	08001ee9 	.word	0x08001ee9
 8001448:	40004400 	.word	0x40004400

0800144c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800144c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800144e:	07da      	lsls	r2, r3, #31
{
 8001450:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001452:	d506      	bpl.n	8001462 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001454:	6801      	ldr	r1, [r0, #0]
 8001456:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001458:	684a      	ldr	r2, [r1, #4]
 800145a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800145e:	4322      	orrs	r2, r4
 8001460:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001462:	079c      	lsls	r4, r3, #30
 8001464:	d506      	bpl.n	8001474 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001466:	6801      	ldr	r1, [r0, #0]
 8001468:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800146a:	684a      	ldr	r2, [r1, #4]
 800146c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001470:	4322      	orrs	r2, r4
 8001472:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001474:	0759      	lsls	r1, r3, #29
 8001476:	d506      	bpl.n	8001486 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001478:	6801      	ldr	r1, [r0, #0]
 800147a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800147c:	684a      	ldr	r2, [r1, #4]
 800147e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001482:	4322      	orrs	r2, r4
 8001484:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001486:	071a      	lsls	r2, r3, #28
 8001488:	d506      	bpl.n	8001498 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800148a:	6801      	ldr	r1, [r0, #0]
 800148c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800148e:	684a      	ldr	r2, [r1, #4]
 8001490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001494:	4322      	orrs	r2, r4
 8001496:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001498:	06dc      	lsls	r4, r3, #27
 800149a:	d506      	bpl.n	80014aa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800149c:	6801      	ldr	r1, [r0, #0]
 800149e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80014a0:	688a      	ldr	r2, [r1, #8]
 80014a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014a6:	4322      	orrs	r2, r4
 80014a8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80014aa:	0699      	lsls	r1, r3, #26
 80014ac:	d506      	bpl.n	80014bc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80014ae:	6801      	ldr	r1, [r0, #0]
 80014b0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80014b2:	688a      	ldr	r2, [r1, #8]
 80014b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014b8:	4322      	orrs	r2, r4
 80014ba:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80014bc:	065a      	lsls	r2, r3, #25
 80014be:	d50f      	bpl.n	80014e0 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80014c0:	6801      	ldr	r1, [r0, #0]
 80014c2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80014c4:	684a      	ldr	r2, [r1, #4]
 80014c6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80014ca:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80014cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80014d0:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80014d2:	d105      	bne.n	80014e0 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80014d4:	684a      	ldr	r2, [r1, #4]
 80014d6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80014d8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80014dc:	4322      	orrs	r2, r4
 80014de:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80014e0:	061b      	lsls	r3, r3, #24
 80014e2:	d506      	bpl.n	80014f2 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80014e4:	6802      	ldr	r2, [r0, #0]
 80014e6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80014e8:	6853      	ldr	r3, [r2, #4]
 80014ea:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80014ee:	430b      	orrs	r3, r1
 80014f0:	6053      	str	r3, [r2, #4]
 80014f2:	bd10      	pop	{r4, pc}

080014f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80014f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014f8:	9d06      	ldr	r5, [sp, #24]
 80014fa:	4604      	mov	r4, r0
 80014fc:	460f      	mov	r7, r1
 80014fe:	4616      	mov	r6, r2
 8001500:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001502:	6821      	ldr	r1, [r4, #0]
 8001504:	69ca      	ldr	r2, [r1, #28]
 8001506:	ea37 0302 	bics.w	r3, r7, r2
 800150a:	bf0c      	ite	eq
 800150c:	2201      	moveq	r2, #1
 800150e:	2200      	movne	r2, #0
 8001510:	42b2      	cmp	r2, r6
 8001512:	d002      	beq.n	800151a <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001514:	2000      	movs	r0, #0
}
 8001516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800151a:	1c6b      	adds	r3, r5, #1
 800151c:	d0f2      	beq.n	8001504 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800151e:	b99d      	cbnz	r5, 8001548 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001528:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	f022 0201 	bic.w	r2, r2, #1
 8001530:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001532:	2320      	movs	r3, #32
 8001534:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001538:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800153c:	2300      	movs	r3, #0
 800153e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001542:	2003      	movs	r0, #3
 8001544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001548:	f7fe fe80 	bl	800024c <HAL_GetTick>
 800154c:	eba0 0008 	sub.w	r0, r0, r8
 8001550:	4285      	cmp	r5, r0
 8001552:	d2d6      	bcs.n	8001502 <UART_WaitOnFlagUntilTimeout+0xe>
 8001554:	e7e4      	b.n	8001520 <UART_WaitOnFlagUntilTimeout+0x2c>

08001556 <HAL_UART_Transmit>:
{
 8001556:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800155a:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800155c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001560:	2b20      	cmp	r3, #32
{
 8001562:	4604      	mov	r4, r0
 8001564:	460d      	mov	r5, r1
 8001566:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001568:	d14c      	bne.n	8001604 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 800156a:	2900      	cmp	r1, #0
 800156c:	d048      	beq.n	8001600 <HAL_UART_Transmit+0xaa>
 800156e:	2a00      	cmp	r2, #0
 8001570:	d046      	beq.n	8001600 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8001572:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001576:	2b01      	cmp	r3, #1
 8001578:	d044      	beq.n	8001604 <HAL_UART_Transmit+0xae>
 800157a:	2301      	movs	r3, #1
 800157c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001580:	2300      	movs	r3, #0
 8001582:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001584:	2321      	movs	r3, #33	; 0x21
 8001586:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 800158a:	f7fe fe5f 	bl	800024c <HAL_GetTick>
    huart->TxXferSize = Size;
 800158e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001592:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001594:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001598:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800159c:	b292      	uxth	r2, r2
 800159e:	b962      	cbnz	r2, 80015ba <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015a0:	9700      	str	r7, [sp, #0]
 80015a2:	4633      	mov	r3, r6
 80015a4:	2140      	movs	r1, #64	; 0x40
 80015a6:	4620      	mov	r0, r4
 80015a8:	f7ff ffa4 	bl	80014f4 <UART_WaitOnFlagUntilTimeout>
 80015ac:	b998      	cbnz	r0, 80015d6 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80015ae:	2320      	movs	r3, #32
 80015b0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80015b4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 80015b8:	e00e      	b.n	80015d8 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80015ba:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015be:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 80015c0:	3b01      	subs	r3, #1
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015c8:	2200      	movs	r2, #0
 80015ca:	4633      	mov	r3, r6
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7ff ff90 	bl	80014f4 <UART_WaitOnFlagUntilTimeout>
 80015d4:	b118      	cbz	r0, 80015de <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 80015d6:	2003      	movs	r0, #3
}
 80015d8:	b002      	add	sp, #8
 80015da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015de:	68a3      	ldr	r3, [r4, #8]
 80015e0:	6822      	ldr	r2, [r4, #0]
 80015e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015e6:	d107      	bne.n	80015f8 <HAL_UART_Transmit+0xa2>
 80015e8:	6923      	ldr	r3, [r4, #16]
 80015ea:	b92b      	cbnz	r3, 80015f8 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80015ec:	f835 3b02 	ldrh.w	r3, [r5], #2
 80015f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015f4:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 80015f6:	e7cf      	b.n	8001598 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80015f8:	782b      	ldrb	r3, [r5, #0]
 80015fa:	8513      	strh	r3, [r2, #40]	; 0x28
 80015fc:	3501      	adds	r5, #1
 80015fe:	e7cb      	b.n	8001598 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001600:	2001      	movs	r0, #1
 8001602:	e7e9      	b.n	80015d8 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001604:	2002      	movs	r0, #2
 8001606:	e7e7      	b.n	80015d8 <HAL_UART_Transmit+0x82>

08001608 <UART_CheckIdleState>:
{
 8001608:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800160a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800160c:	2600      	movs	r6, #0
 800160e:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001610:	f7fe fe1c 	bl	800024c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001614:	6823      	ldr	r3, [r4, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800161a:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800161c:	d417      	bmi.n	800164e <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	075b      	lsls	r3, r3, #29
 8001624:	d50a      	bpl.n	800163c <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001626:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2200      	movs	r2, #0
 800162e:	462b      	mov	r3, r5
 8001630:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001634:	4620      	mov	r0, r4
 8001636:	f7ff ff5d 	bl	80014f4 <UART_WaitOnFlagUntilTimeout>
 800163a:	b9a0      	cbnz	r0, 8001666 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 800163c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800163e:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001640:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001644:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001648:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800164c:	e00c      	b.n	8001668 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800164e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	4632      	mov	r2, r6
 8001656:	4603      	mov	r3, r0
 8001658:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800165c:	4620      	mov	r0, r4
 800165e:	f7ff ff49 	bl	80014f4 <UART_WaitOnFlagUntilTimeout>
 8001662:	2800      	cmp	r0, #0
 8001664:	d0db      	beq.n	800161e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001666:	2003      	movs	r0, #3
}
 8001668:	b002      	add	sp, #8
 800166a:	bd70      	pop	{r4, r5, r6, pc}

0800166c <HAL_UART_Init>:
{
 800166c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800166e:	4604      	mov	r4, r0
 8001670:	b360      	cbz	r0, 80016cc <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001672:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001676:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800167a:	b91b      	cbnz	r3, 8001684 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800167c:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001680:	f000 fb76 	bl	8001d70 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001684:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001686:	2324      	movs	r3, #36	; 0x24
 8001688:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800168c:	6813      	ldr	r3, [r2, #0]
 800168e:	f023 0301 	bic.w	r3, r3, #1
 8001692:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001694:	4620      	mov	r0, r4
 8001696:	f7ff fe33 	bl	8001300 <UART_SetConfig>
 800169a:	2801      	cmp	r0, #1
 800169c:	d016      	beq.n	80016cc <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800169e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016a0:	b113      	cbz	r3, 80016a8 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80016a2:	4620      	mov	r0, r4
 80016a4:	f7ff fed2 	bl	800144c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016b8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80016c0:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80016c2:	601a      	str	r2, [r3, #0]
}
 80016c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80016c8:	f7ff bf9e 	b.w	8001608 <UART_CheckIdleState>
}
 80016cc:	2001      	movs	r0, #1
 80016ce:	bd10      	pop	{r4, pc}

080016d0 <EEPROM_SPI_INIT>:
/**
 * @brief Init EEPROM SPI
 *
 * @param hspi Pointer to SPI struct handler
 */
void EEPROM_SPI_INIT(void) {
 80016d0:	b508      	push	{r3, lr}
	#endif
}
void HAL_GPIO_WritePinH(void *GPIO,uint16_t PIN,int state)
{
	#ifdef HAL_DRIVER
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 80016d2:	2201      	movs	r2, #1
 80016d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016dc:	f7fe fee6 	bl	80004ac <HAL_GPIO_WritePin>
 80016e0:	2201      	movs	r2, #1
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <EEPROM_SPI_INIT+0x20>)
}
 80016e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 80016ea:	f7fe bedf 	b.w	80004ac <HAL_GPIO_WritePin>
 80016ee:	bf00      	nop
 80016f0:	48000800 	.word	0x48000800

080016f4 <EEPROM_SPI_SendInstruction>:
void EEPROM_SPI_SendInstruction(void *EEPROM_SPI,uint8_t *instruction, uint8_t size) {
 80016f4:	b570      	push	{r4, r5, r6, lr}
 80016f6:	4604      	mov	r4, r0
 80016f8:	460d      	mov	r5, r1
 80016fa:	4616      	mov	r6, r2
    while (((SPI_HandleTypeDef *)EEPROM_SPI)->State == HAL_SPI_STATE_RESET) {
 80016fc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8001700:	b153      	cbz	r3, 8001718 <EEPROM_SPI_SendInstruction+0x24>
		status_op = (HAL_StatusTypeDef_H)HAL_SPI_Transmit(hspi,pData,Size,Timeout);
 8001702:	23c8      	movs	r3, #200	; 0xc8
 8001704:	4632      	mov	r2, r6
 8001706:	4629      	mov	r1, r5
 8001708:	4620      	mov	r0, r4
 800170a:	f7ff fb65 	bl	8000dd8 <HAL_SPI_Transmit>
    if (HAL_SPI_TransmitH(EEPROM_SPI, (uint8_t*)instruction, (uint16_t)size, 200) != HAL_OK_H) {
 800170e:	b138      	cbz	r0, 8001720 <EEPROM_SPI_SendInstruction+0x2c>
}
 8001710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Error_Handler();
 8001714:	f000 ba58 	b.w	8001bc8 <Error_Handler>
		HAL_Delay(time);
 8001718:	2001      	movs	r0, #1
 800171a:	f7fe fd9d 	bl	8000258 <HAL_Delay>
 800171e:	e7ed      	b.n	80016fc <EEPROM_SPI_SendInstruction+0x8>
 8001720:	bd70      	pop	{r4, r5, r6, pc}
	...

08001724 <EEPROM_SPI_ReadBuffer>:
EepromOperations EEPROM_SPI_ReadBuffer(void *EEPROM_SPI,uint8_t* pBuffer, uint16_t ReadAddr, uint16_t NumByteToRead) {
 8001724:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001728:	4604      	mov	r4, r0
 800172a:	460f      	mov	r7, r1
 800172c:	4616      	mov	r6, r2
 800172e:	4698      	mov	r8, r3
	while (((SPI_HandleTypeDef *)EEPROM_SPI)->State != HAL_SPI_STATE_READY) {
 8001730:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8001734:	2b01      	cmp	r3, #1
 8001736:	d122      	bne.n	800177e <EEPROM_SPI_ReadBuffer+0x5a>
    header[0] = EEPROM_READ;    // Send "Read from Memory" instruction
 8001738:	2503      	movs	r5, #3
    header[1] = ReadAddr >> 8;  // Send 16-bit address
 800173a:	0a33      	lsrs	r3, r6, #8
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 800173c:	2200      	movs	r2, #0
 800173e:	2140      	movs	r1, #64	; 0x40
 8001740:	4813      	ldr	r0, [pc, #76]	; (8001790 <EEPROM_SPI_ReadBuffer+0x6c>)
    header[0] = EEPROM_READ;    // Send "Read from Memory" instruction
 8001742:	f88d 5004 	strb.w	r5, [sp, #4]
    header[1] = ReadAddr >> 8;  // Send 16-bit address
 8001746:	f88d 3005 	strb.w	r3, [sp, #5]
    header[2] = ReadAddr;
 800174a:	f88d 6006 	strb.w	r6, [sp, #6]
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 800174e:	f7fe fead 	bl	80004ac <HAL_GPIO_WritePin>
    EEPROM_SPI_SendInstruction(EEPROM_SPI,header, 3);
 8001752:	462a      	mov	r2, r5
 8001754:	a901      	add	r1, sp, #4
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff ffcc 	bl	80016f4 <EEPROM_SPI_SendInstruction>
		status_op = (HAL_StatusTypeDef_H)HAL_SPI_Receive(hspi,pData,Size,Timeout);
 800175c:	23c8      	movs	r3, #200	; 0xc8
 800175e:	4642      	mov	r2, r8
 8001760:	4639      	mov	r1, r7
 8001762:	4620      	mov	r0, r4
 8001764:	f7ff fd22 	bl	80011ac <HAL_SPI_Receive>
    while (HAL_SPI_ReceiveH(EEPROM_SPI, (uint8_t*)pBuffer, NumByteToRead, 200) == HAL_BUSY_H) {
 8001768:	2802      	cmp	r0, #2
 800176a:	d00c      	beq.n	8001786 <EEPROM_SPI_ReadBuffer+0x62>
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 800176c:	2201      	movs	r2, #1
 800176e:	2140      	movs	r1, #64	; 0x40
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <EEPROM_SPI_ReadBuffer+0x6c>)
 8001772:	f7fe fe9b 	bl	80004ac <HAL_GPIO_WritePin>
}
 8001776:	2001      	movs	r0, #1
 8001778:	b002      	add	sp, #8
 800177a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_Delay(time);
 800177e:	2001      	movs	r0, #1
 8001780:	f7fe fd6a 	bl	8000258 <HAL_Delay>
 8001784:	e7d4      	b.n	8001730 <EEPROM_SPI_ReadBuffer+0xc>
 8001786:	2001      	movs	r0, #1
 8001788:	f7fe fd66 	bl	8000258 <HAL_Delay>
 800178c:	e7e6      	b.n	800175c <EEPROM_SPI_ReadBuffer+0x38>
 800178e:	bf00      	nop
 8001790:	48000400 	.word	0x48000400

08001794 <sEE_WriteEnable>:
void sEE_WriteEnable(void *EEPROM_SPI) {
 8001794:	b537      	push	{r0, r1, r2, r4, r5, lr}
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 8001796:	4c0b      	ldr	r4, [pc, #44]	; (80017c4 <sEE_WriteEnable+0x30>)
void sEE_WriteEnable(void *EEPROM_SPI) {
 8001798:	4605      	mov	r5, r0
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 800179a:	2200      	movs	r2, #0
 800179c:	4620      	mov	r0, r4
 800179e:	2140      	movs	r1, #64	; 0x40
 80017a0:	f7fe fe84 	bl	80004ac <HAL_GPIO_WritePin>
    uint8_t command[1] = { EEPROM_WREN };
 80017a4:	a902      	add	r1, sp, #8
 80017a6:	2306      	movs	r3, #6
 80017a8:	f801 3d04 	strb.w	r3, [r1, #-4]!
    EEPROM_SPI_SendInstruction(EEPROM_SPI,(uint8_t*)command, 1);
 80017ac:	4628      	mov	r0, r5
 80017ae:	2201      	movs	r2, #1
 80017b0:	f7ff ffa0 	bl	80016f4 <EEPROM_SPI_SendInstruction>
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 80017b4:	2201      	movs	r2, #1
 80017b6:	2140      	movs	r1, #64	; 0x40
 80017b8:	4620      	mov	r0, r4
 80017ba:	f7fe fe77 	bl	80004ac <HAL_GPIO_WritePin>
}
 80017be:	b003      	add	sp, #12
 80017c0:	bd30      	pop	{r4, r5, pc}
 80017c2:	bf00      	nop
 80017c4:	48000400 	.word	0x48000400

080017c8 <sEE_WriteDisable>:
void sEE_WriteDisable(void *EEPROM_SPI) {
 80017c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 80017ca:	4c0b      	ldr	r4, [pc, #44]	; (80017f8 <sEE_WriteDisable+0x30>)
void sEE_WriteDisable(void *EEPROM_SPI) {
 80017cc:	4605      	mov	r5, r0
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 80017ce:	2200      	movs	r2, #0
 80017d0:	4620      	mov	r0, r4
 80017d2:	2140      	movs	r1, #64	; 0x40
 80017d4:	f7fe fe6a 	bl	80004ac <HAL_GPIO_WritePin>
    uint8_t command[1] = { EEPROM_WRDI };
 80017d8:	a902      	add	r1, sp, #8
 80017da:	2304      	movs	r3, #4
 80017dc:	f801 3d04 	strb.w	r3, [r1, #-4]!
    EEPROM_SPI_SendInstruction(EEPROM_SPI,(uint8_t*)command, 1);
 80017e0:	4628      	mov	r0, r5
 80017e2:	2201      	movs	r2, #1
 80017e4:	f7ff ff86 	bl	80016f4 <EEPROM_SPI_SendInstruction>
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 80017e8:	2201      	movs	r2, #1
 80017ea:	2140      	movs	r1, #64	; 0x40
 80017ec:	4620      	mov	r0, r4
 80017ee:	f7fe fe5d 	bl	80004ac <HAL_GPIO_WritePin>
}
 80017f2:	b003      	add	sp, #12
 80017f4:	bd30      	pop	{r4, r5, pc}
 80017f6:	bf00      	nop
 80017f8:	48000400 	.word	0x48000400

080017fc <EEPROM_SPI_WaitStandbyState>:
uint8_t EEPROM_SPI_WaitStandbyState(void *EEPROM_SPI) {
 80017fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t command[1] = { EEPROM_RDSR };
 80017fe:	ac02      	add	r4, sp, #8
 8001800:	2305      	movs	r3, #5
 8001802:	f804 3d04 	strb.w	r3, [r4, #-4]!
    uint8_t sEEstatus[1] = { 0x00 };
 8001806:	2200      	movs	r2, #0
uint8_t EEPROM_SPI_WaitStandbyState(void *EEPROM_SPI) {
 8001808:	4605      	mov	r5, r0
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 800180a:	2140      	movs	r1, #64	; 0x40
 800180c:	4812      	ldr	r0, [pc, #72]	; (8001858 <EEPROM_SPI_WaitStandbyState+0x5c>)
    uint8_t sEEstatus[1] = { 0x00 };
 800180e:	f88d 2000 	strb.w	r2, [sp]
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 8001812:	f7fe fe4b 	bl	80004ac <HAL_GPIO_WritePin>
    EEPROM_SPI_SendInstruction(EEPROM_SPI,(uint8_t*)command, 1);
 8001816:	2201      	movs	r2, #1
 8001818:	4621      	mov	r1, r4
 800181a:	4628      	mov	r0, r5
 800181c:	f7ff ff6a 	bl	80016f4 <EEPROM_SPI_SendInstruction>
		status_op = (HAL_StatusTypeDef_H)HAL_SPI_Receive(hspi,pData,Size,Timeout);
 8001820:	23c8      	movs	r3, #200	; 0xc8
 8001822:	2201      	movs	r2, #1
 8001824:	4669      	mov	r1, sp
 8001826:	4628      	mov	r0, r5
 8001828:	f7ff fcc0 	bl	80011ac <HAL_SPI_Receive>
        while (HAL_SPI_ReceiveH(EEPROM_SPI, (uint8_t*)sEEstatus, 1, 200) == HAL_BUSY_H) {
 800182c:	2802      	cmp	r0, #2
		HAL_Delay(time);
 800182e:	f04f 0001 	mov.w	r0, #1
        while (HAL_SPI_ReceiveH(EEPROM_SPI, (uint8_t*)sEEstatus, 1, 200) == HAL_BUSY_H) {
 8001832:	d00e      	beq.n	8001852 <EEPROM_SPI_WaitStandbyState+0x56>
		HAL_Delay(time);
 8001834:	f7fe fd10 	bl	8000258 <HAL_Delay>
    } while ((sEEstatus[0] & EEPROM_WIP_FLAG) == SET_EEP_H); // Write in progress
 8001838:	f89d 0000 	ldrb.w	r0, [sp]
 800183c:	f010 0401 	ands.w	r4, r0, #1
 8001840:	d1ee      	bne.n	8001820 <EEPROM_SPI_WaitStandbyState+0x24>
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 8001842:	2201      	movs	r2, #1
 8001844:	2140      	movs	r1, #64	; 0x40
 8001846:	4804      	ldr	r0, [pc, #16]	; (8001858 <EEPROM_SPI_WaitStandbyState+0x5c>)
 8001848:	f7fe fe30 	bl	80004ac <HAL_GPIO_WritePin>
}
 800184c:	4620      	mov	r0, r4
 800184e:	b003      	add	sp, #12
 8001850:	bd30      	pop	{r4, r5, pc}
		HAL_Delay(time);
 8001852:	f7fe fd01 	bl	8000258 <HAL_Delay>
 8001856:	e7e3      	b.n	8001820 <EEPROM_SPI_WaitStandbyState+0x24>
 8001858:	48000400 	.word	0x48000400

0800185c <EEPROM_SPI_WritePage>:
EepromOperations EEPROM_SPI_WritePage(void *EEPROM_SPI,uint8_t* pBuffer, uint16_t WriteAddr, uint16_t NumByteToWrite) {
 800185c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001860:	4604      	mov	r4, r0
 8001862:	460f      	mov	r7, r1
 8001864:	4615      	mov	r5, r2
 8001866:	4698      	mov	r8, r3
	while (((SPI_HandleTypeDef *)EEPROM_SPI)->State != HAL_SPI_STATE_READY) {
 8001868:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800186c:	2b01      	cmp	r3, #1
 800186e:	d137      	bne.n	80018e0 <EEPROM_SPI_WritePage+0x84>
    sEE_WriteEnable(EEPROM_SPI);
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff ff8f 	bl	8001794 <sEE_WriteEnable>
    header[0] = EEPROM_WRITE;   // Send "Write to Memory" instruction
 8001876:	2302      	movs	r3, #2
 8001878:	f88d 3004 	strb.w	r3, [sp, #4]
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 800187c:	2200      	movs	r2, #0
    header[1] = WriteAddr >> 8; // Send 16-bit address
 800187e:	0a2b      	lsrs	r3, r5, #8
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 8001880:	2140      	movs	r1, #64	; 0x40
 8001882:	4819      	ldr	r0, [pc, #100]	; (80018e8 <EEPROM_SPI_WritePage+0x8c>)
    header[1] = WriteAddr >> 8; // Send 16-bit address
 8001884:	f88d 3005 	strb.w	r3, [sp, #5]
    header[2] = WriteAddr;
 8001888:	f88d 5006 	strb.w	r5, [sp, #6]
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 800188c:	f7fe fe0e 	bl	80004ac <HAL_GPIO_WritePin>
    EEPROM_SPI_SendInstruction(EEPROM_SPI,(uint8_t*)header, 3);
 8001890:	2203      	movs	r2, #3
 8001892:	a901      	add	r1, sp, #4
 8001894:	4620      	mov	r0, r4
 8001896:	f7ff ff2d 	bl	80016f4 <EEPROM_SPI_SendInstruction>
 800189a:	2505      	movs	r5, #5
		status_op = (HAL_StatusTypeDef_H)HAL_SPI_Transmit(hspi,pData,Size,Timeout);
 800189c:	2364      	movs	r3, #100	; 0x64
 800189e:	4642      	mov	r2, r8
 80018a0:	4639      	mov	r1, r7
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff fa98 	bl	8000dd8 <HAL_SPI_Transmit>
        if (spiTransmitStatus == HAL_BUSY_H) {
 80018a8:	2802      	cmp	r0, #2
		status_op = (HAL_StatusTypeDef_H)HAL_SPI_Transmit(hspi,pData,Size,Timeout);
 80018aa:	4606      	mov	r6, r0
        if (spiTransmitStatus == HAL_BUSY_H) {
 80018ac:	d106      	bne.n	80018bc <EEPROM_SPI_WritePage+0x60>
		HAL_Delay(time);
 80018ae:	2005      	movs	r0, #5
 80018b0:	3d01      	subs	r5, #1
 80018b2:	f7fe fcd1 	bl	8000258 <HAL_Delay>
    for (uint8_t i = 0; i < 5; i++) {
 80018b6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80018ba:	d1ef      	bne.n	800189c <EEPROM_SPI_WritePage+0x40>
		HAL_GPIO_WritePin(GPIO, PIN,state);//addr
 80018bc:	2201      	movs	r2, #1
 80018be:	2140      	movs	r1, #64	; 0x40
 80018c0:	4809      	ldr	r0, [pc, #36]	; (80018e8 <EEPROM_SPI_WritePage+0x8c>)
 80018c2:	f7fe fdf3 	bl	80004ac <HAL_GPIO_WritePin>
    EEPROM_SPI_WaitStandbyState(EEPROM_SPI);
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff ff98 	bl	80017fc <EEPROM_SPI_WaitStandbyState>
    sEE_WriteDisable(EEPROM_SPI);
 80018cc:	4620      	mov	r0, r4
 80018ce:	f7ff ff7b 	bl	80017c8 <sEE_WriteDisable>
        return EEPROM_STATUS_COMPLETE;
 80018d2:	2e01      	cmp	r6, #1
}
 80018d4:	bf0c      	ite	eq
 80018d6:	2002      	moveq	r0, #2
 80018d8:	2001      	movne	r0, #1
 80018da:	b002      	add	sp, #8
 80018dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_Delay(time);
 80018e0:	2001      	movs	r0, #1
 80018e2:	f7fe fcb9 	bl	8000258 <HAL_Delay>
 80018e6:	e7bf      	b.n	8001868 <EEPROM_SPI_WritePage+0xc>
 80018e8:	48000400 	.word	0x48000400

080018ec <EEPROM_SPI_WriteBuffer>:
EepromOperations EEPROM_SPI_WriteBuffer(void *EEPROM_SPI,uint8_t* pBuffer, uint16_t WriteAddr, uint16_t NumByteToWrite) {
 80018ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (Addr == 0) { /* WriteAddr is EEPROM_PAGESIZE aligned  */
 80018f0:	f012 051f 	ands.w	r5, r2, #31
EepromOperations EEPROM_SPI_WriteBuffer(void *EEPROM_SPI,uint8_t* pBuffer, uint16_t WriteAddr, uint16_t NumByteToWrite) {
 80018f4:	4681      	mov	r9, r0
 80018f6:	4688      	mov	r8, r1
 80018f8:	4614      	mov	r4, r2
 80018fa:	461e      	mov	r6, r3
    NumOfPage =  NumByteToWrite / EEPROM_PAGESIZE;
 80018fc:	ea4f 1753 	mov.w	r7, r3, lsr #5
    NumOfSingle = NumByteToWrite % EEPROM_PAGESIZE;
 8001900:	f003 0a1f 	and.w	sl, r3, #31
    if (Addr == 0) { /* WriteAddr is EEPROM_PAGESIZE aligned  */
 8001904:	d11b      	bne.n	800193e <EEPROM_SPI_WriteBuffer+0x52>
        if (NumOfPage == 0) { /* NumByteToWrite < EEPROM_PAGESIZE */
 8001906:	b147      	cbz	r7, 800191a <EEPROM_SPI_WriteBuffer+0x2e>
 8001908:	eb02 1747 	add.w	r7, r2, r7, lsl #5
 800190c:	b2bd      	uxth	r5, r7
            while (NumOfPage--) {
 800190e:	42ac      	cmp	r4, r5
 8001910:	d107      	bne.n	8001922 <EEPROM_SPI_WriteBuffer+0x36>
            pageWriteStatus = EEPROM_SPI_WritePage(EEPROM_SPI,pBuffer, WriteAddr, sEE_DataNum);
 8001912:	4653      	mov	r3, sl
 8001914:	4622      	mov	r2, r4
 8001916:	4641      	mov	r1, r8
                pageWriteStatus = EEPROM_SPI_WritePage(EEPROM_SPI,pBuffer, WriteAddr, sEE_DataNum);
 8001918:	4648      	mov	r0, r9
}
 800191a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                pageWriteStatus = EEPROM_SPI_WritePage(EEPROM_SPI,pBuffer, WriteAddr, sEE_DataNum);
 800191e:	f7ff bf9d 	b.w	800185c <EEPROM_SPI_WritePage>
                pageWriteStatus = EEPROM_SPI_WritePage(EEPROM_SPI,pBuffer, WriteAddr, sEE_DataNum);
 8001922:	2320      	movs	r3, #32
 8001924:	4622      	mov	r2, r4
 8001926:	4641      	mov	r1, r8
 8001928:	4648      	mov	r0, r9
 800192a:	f7ff ff97 	bl	800185c <EEPROM_SPI_WritePage>
                if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800192e:	2801      	cmp	r0, #1
                pageWriteStatus = EEPROM_SPI_WritePage(EEPROM_SPI,pBuffer, WriteAddr, sEE_DataNum);
 8001930:	4607      	mov	r7, r0
                if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 8001932:	d13e      	bne.n	80019b2 <EEPROM_SPI_WriteBuffer+0xc6>
                WriteAddr +=  EEPROM_PAGESIZE;
 8001934:	3420      	adds	r4, #32
 8001936:	b2a4      	uxth	r4, r4
                pBuffer += EEPROM_PAGESIZE;
 8001938:	f108 0820 	add.w	r8, r8, #32
 800193c:	e7e7      	b.n	800190e <EEPROM_SPI_WriteBuffer+0x22>
    count = EEPROM_PAGESIZE - Addr;
 800193e:	f1c5 0520 	rsb	r5, r5, #32
 8001942:	b2ad      	uxth	r5, r5
        if (NumOfPage == 0) { /* NumByteToWrite < EEPROM_PAGESIZE */
 8001944:	b97f      	cbnz	r7, 8001966 <EEPROM_SPI_WriteBuffer+0x7a>
            if (NumOfSingle > count) { /* (NumByteToWrite + WriteAddr) > EEPROM_PAGESIZE */
 8001946:	4555      	cmp	r5, sl
 8001948:	d2e7      	bcs.n	800191a <EEPROM_SPI_WriteBuffer+0x2e>
                pageWriteStatus = EEPROM_SPI_WritePage(EEPROM_SPI,pBuffer, WriteAddr, sEE_DataNum);
 800194a:	462b      	mov	r3, r5
 800194c:	f7ff ff86 	bl	800185c <EEPROM_SPI_WritePage>
                if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 8001950:	2801      	cmp	r0, #1
                pageWriteStatus = EEPROM_SPI_WritePage(EEPROM_SPI,pBuffer, WriteAddr, sEE_DataNum);
 8001952:	4607      	mov	r7, r0
                if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 8001954:	d12d      	bne.n	80019b2 <EEPROM_SPI_WriteBuffer+0xc6>
                temp = NumOfSingle - count;
 8001956:	ebaa 0305 	sub.w	r3, sl, r5
                WriteAddr +=  count;
 800195a:	1962      	adds	r2, r4, r5
                pageWriteStatus = EEPROM_SPI_WritePage(EEPROM_SPI,pBuffer, WriteAddr, sEE_DataNum);
 800195c:	b29b      	uxth	r3, r3
 800195e:	b292      	uxth	r2, r2
 8001960:	eb08 0105 	add.w	r1, r8, r5
 8001964:	e7d8      	b.n	8001918 <EEPROM_SPI_WriteBuffer+0x2c>
            pageWriteStatus = EEPROM_SPI_WritePage(EEPROM_SPI,pBuffer, WriteAddr, sEE_DataNum);
 8001966:	462b      	mov	r3, r5
 8001968:	f7ff ff78 	bl	800185c <EEPROM_SPI_WritePage>
            if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800196c:	2801      	cmp	r0, #1
            pageWriteStatus = EEPROM_SPI_WritePage(EEPROM_SPI,pBuffer, WriteAddr, sEE_DataNum);
 800196e:	4607      	mov	r7, r0
            if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 8001970:	d11f      	bne.n	80019b2 <EEPROM_SPI_WriteBuffer+0xc6>
            NumByteToWrite -= count;
 8001972:	1b76      	subs	r6, r6, r5
            WriteAddr +=  count;
 8001974:	442c      	add	r4, r5
            NumByteToWrite -= count;
 8001976:	b2b6      	uxth	r6, r6
            WriteAddr +=  count;
 8001978:	b2a4      	uxth	r4, r4
            NumOfPage =  NumByteToWrite / EEPROM_PAGESIZE;
 800197a:	ea4f 1a56 	mov.w	sl, r6, lsr #5
 800197e:	eb04 1a4a 	add.w	sl, r4, sl, lsl #5
            pBuffer += count;
 8001982:	4445      	add	r5, r8
 8001984:	fa1f fa8a 	uxth.w	sl, sl
            while (NumOfPage--) {
 8001988:	4554      	cmp	r4, sl
 800198a:	d105      	bne.n	8001998 <EEPROM_SPI_WriteBuffer+0xac>
            if (NumOfSingle != 0) {
 800198c:	f016 031f 	ands.w	r3, r6, #31
 8001990:	d00f      	beq.n	80019b2 <EEPROM_SPI_WriteBuffer+0xc6>
                pageWriteStatus = EEPROM_SPI_WritePage(EEPROM_SPI,pBuffer, WriteAddr, sEE_DataNum);
 8001992:	4622      	mov	r2, r4
 8001994:	4629      	mov	r1, r5
 8001996:	e7bf      	b.n	8001918 <EEPROM_SPI_WriteBuffer+0x2c>
                pageWriteStatus = EEPROM_SPI_WritePage(EEPROM_SPI,pBuffer, WriteAddr, sEE_DataNum);
 8001998:	2320      	movs	r3, #32
 800199a:	4622      	mov	r2, r4
 800199c:	4629      	mov	r1, r5
 800199e:	4648      	mov	r0, r9
 80019a0:	f7ff ff5c 	bl	800185c <EEPROM_SPI_WritePage>
                if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 80019a4:	2801      	cmp	r0, #1
 80019a6:	d103      	bne.n	80019b0 <EEPROM_SPI_WriteBuffer+0xc4>
                WriteAddr +=  EEPROM_PAGESIZE;
 80019a8:	3420      	adds	r4, #32
 80019aa:	b2a4      	uxth	r4, r4
                pBuffer += EEPROM_PAGESIZE;
 80019ac:	3520      	adds	r5, #32
 80019ae:	e7eb      	b.n	8001988 <EEPROM_SPI_WriteBuffer+0x9c>
                pageWriteStatus = EEPROM_SPI_WritePage(EEPROM_SPI,pBuffer, WriteAddr, sEE_DataNum);
 80019b0:	4607      	mov	r7, r0
}
 80019b2:	4638      	mov	r0, r7
 80019b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080019b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019b8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ba:	2214      	movs	r2, #20
{
 80019bc:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019be:	eb0d 0002 	add.w	r0, sp, r2
 80019c2:	2100      	movs	r1, #0
 80019c4:	f000 fa54 	bl	8001e70 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c8:	4b35      	ldr	r3, [pc, #212]	; (8001aa0 <MX_GPIO_Init+0xe8>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_2, GPIO_PIN_RESET);
 80019ca:	4e36      	ldr	r6, [pc, #216]	; (8001aa4 <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019cc:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80019ce:	4f36      	ldr	r7, [pc, #216]	; (8001aa8 <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019d4:	615a      	str	r2, [r3, #20]
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80019dc:	9201      	str	r2, [sp, #4]
 80019de:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80019e6:	615a      	str	r2, [r3, #20]
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80019ee:	9202      	str	r2, [sp, #8]
 80019f0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019f8:	615a      	str	r2, [r3, #20]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001a00:	9203      	str	r2, [sp, #12]
 8001a02:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001a0a:	615a      	str	r2, [r3, #20]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a12:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_2, GPIO_PIN_RESET);
 8001a14:	4630      	mov	r0, r6
 8001a16:	2200      	movs	r2, #0
 8001a18:	2184      	movs	r1, #132	; 0x84
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_2, GPIO_PIN_RESET);
 8001a1c:	f7fe fd46 	bl	80004ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2a:	f7fe fd3f 	bl	80004ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	4638      	mov	r0, r7
 8001a32:	2140      	movs	r1, #64	; 0x40
 8001a34:	f7fe fd3a 	bl	80004ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8001a3e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a40:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_GPIO_Init+0xf4>)
 8001a44:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a46:	4630      	mov	r0, r6

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a4c:	f7fe fc74 	bl	8000338 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a50:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a52:	a905      	add	r1, sp, #20
 8001a54:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a56:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5e:	f7fe fc6b 	bl	8000338 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a62:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a64:	a905      	add	r1, sp, #20
 8001a66:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a68:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a70:	f7fe fc62 	bl	8000338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a74:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	a905      	add	r1, sp, #20
 8001a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a7e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f7fe fc57 	bl	8000338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a8a:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	a905      	add	r1, sp, #20
 8001a8e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a90:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	f7fe fc4e 	bl	8000338 <HAL_GPIO_Init>

}
 8001a9c:	b00b      	add	sp, #44	; 0x2c
 8001a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	48000800 	.word	0x48000800
 8001aa8:	48000400 	.word	0x48000400
 8001aac:	10210000 	.word	0x10210000

08001ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab0:	b510      	push	{r4, lr}
 8001ab2:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab4:	2228      	movs	r2, #40	; 0x28
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	a806      	add	r0, sp, #24
 8001aba:	f000 f9d9 	bl	8001e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001abe:	2214      	movs	r2, #20
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	a801      	add	r0, sp, #4
 8001ac4:	f000 f9d4 	bl	8001e70 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001acc:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ace:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ad0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001ad4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001ad8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ada:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001adc:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ade:	f7fe fcef 	bl	80004c0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae2:	230f      	movs	r3, #15
 8001ae4:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aea:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aec:	4621      	mov	r1, r4
 8001aee:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af0:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001af4:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af6:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001af8:	f7fe ff8a 	bl	8000a10 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001afc:	b010      	add	sp, #64	; 0x40
 8001afe:	bd10      	pop	{r4, pc}

08001b00 <main>:
{
 8001b00:	b570      	push	{r4, r5, r6, lr}
	  uint8_t TxBuffer[32] = "TEST THIS COOL EEPIOI STM SPI ++";
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <main+0xb0>)
{
 8001b04:	b094      	sub	sp, #80	; 0x50
	  uint8_t TxBuffer[32] = "TEST THIS COOL EEPIOI STM SPI ++";
 8001b06:	aa04      	add	r2, sp, #16
 8001b08:	f103 0620 	add.w	r6, r3, #32
 8001b0c:	4615      	mov	r5, r2
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	6859      	ldr	r1, [r3, #4]
 8001b12:	4614      	mov	r4, r2
 8001b14:	c403      	stmia	r4!, {r0, r1}
 8001b16:	3308      	adds	r3, #8
 8001b18:	42b3      	cmp	r3, r6
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	d1f7      	bne.n	8001b0e <main+0xe>
	  uint8_t Banner[] = "hola";
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <main+0xb4>)
		HAL_UART_Transmit(&huart2, &RxBuffer,32, 15);
 8001b20:	4c25      	ldr	r4, [pc, #148]	; (8001bb8 <main+0xb8>)
	  uint8_t Banner[] = "hola";
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	791b      	ldrb	r3, [r3, #4]
 8001b26:	f88d 300c 	strb.w	r3, [sp, #12]
 8001b2a:	9002      	str	r0, [sp, #8]
  HAL_Init();
 8001b2c:	f7fe fb70 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 8001b30:	f7ff ffbe 	bl	8001ab0 <SystemClock_Config>
  MX_GPIO_Init();
 8001b34:	f7ff ff40 	bl	80019b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b38:	f000 f8fc 	bl	8001d34 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001b3c:	f000 f846 	bl	8001bcc <MX_SPI1_Init>
  EEPROM_SPI_INIT();
 8001b40:	f7ff fdc6 	bl	80016d0 <EEPROM_SPI_INIT>
  HAL_UART_Transmit(&huart2, &Banner,4, 15);
 8001b44:	230f      	movs	r3, #15
 8001b46:	2204      	movs	r2, #4
 8001b48:	a902      	add	r1, sp, #8
 8001b4a:	481b      	ldr	r0, [pc, #108]	; (8001bb8 <main+0xb8>)
 8001b4c:	f7ff fd03 	bl	8001556 <HAL_UART_Transmit>
  len = sprintf(buffout,"\n");
 8001b50:	491a      	ldr	r1, [pc, #104]	; (8001bbc <main+0xbc>)
 8001b52:	a801      	add	r0, sp, #4
 8001b54:	f000 f994 	bl	8001e80 <strcpy>
  HAL_UART_Transmit(&huart2, &buffout,len, 15);
 8001b58:	230f      	movs	r3, #15
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	a901      	add	r1, sp, #4
 8001b5e:	4816      	ldr	r0, [pc, #88]	; (8001bb8 <main+0xb8>)
 8001b60:	f7ff fcf9 	bl	8001556 <HAL_UART_Transmit>
  EEPROM_SPI_WriteBuffer(&hspi1,TxBuffer, (uint16_t)0x01, (uint16_t)32);
 8001b64:	2320      	movs	r3, #32
 8001b66:	2201      	movs	r2, #1
 8001b68:	4629      	mov	r1, r5
 8001b6a:	4815      	ldr	r0, [pc, #84]	; (8001bc0 <main+0xc0>)
 8001b6c:	f7ff febe 	bl	80018ec <EEPROM_SPI_WriteBuffer>
	  	HAL_Delay(3000);
 8001b70:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001b74:	f7fe fb70 	bl	8000258 <HAL_Delay>
		EEPROM_SPI_ReadBuffer(&hspi1,RxBuffer, (uint16_t)0x01, (uint16_t)32);
 8001b78:	a90c      	add	r1, sp, #48	; 0x30
 8001b7a:	2320      	movs	r3, #32
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4810      	ldr	r0, [pc, #64]	; (8001bc0 <main+0xc0>)
 8001b80:	f7ff fdd0 	bl	8001724 <EEPROM_SPI_ReadBuffer>
		HAL_UART_Transmit(&huart2, &RxBuffer,32, 15);
 8001b84:	230f      	movs	r3, #15
 8001b86:	2220      	movs	r2, #32
 8001b88:	a90c      	add	r1, sp, #48	; 0x30
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff fce3 	bl	8001556 <HAL_UART_Transmit>
		len = sprintf(buffout,"\n");
 8001b90:	490a      	ldr	r1, [pc, #40]	; (8001bbc <main+0xbc>)
 8001b92:	a801      	add	r0, sp, #4
 8001b94:	f000 f974 	bl	8001e80 <strcpy>
		HAL_UART_Transmit(&huart2, &buffout,len, 15);
 8001b98:	a901      	add	r1, sp, #4
 8001b9a:	230f      	movs	r3, #15
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f7ff fcd9 	bl	8001556 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <main+0xc4>)
 8001ba8:	f7fe fc85 	bl	80004b6 <HAL_GPIO_TogglePin>
 8001bac:	e7e0      	b.n	8001b70 <main+0x70>
 8001bae:	bf00      	nop
 8001bb0:	08001ea8 	.word	0x08001ea8
 8001bb4:	08001eef 	.word	0x08001eef
 8001bb8:	20000090 	.word	0x20000090
 8001bbc:	08001eed 	.word	0x08001eed
 8001bc0:	2000002c 	.word	0x2000002c
 8001bc4:	48000800 	.word	0x48000800

08001bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc8:	4770      	bx	lr
	...

08001bcc <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8001bcc:	4811      	ldr	r0, [pc, #68]	; (8001c14 <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bce:	4912      	ldr	r1, [pc, #72]	; (8001c18 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bd0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
{
 8001bd4:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bd6:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bda:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001be0:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001be4:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001be6:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001be8:	2220      	movs	r2, #32
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bea:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bec:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bee:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001bf0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bf2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bf8:	2207      	movs	r2, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bfa:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bfc:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8001bfe:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c00:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c02:	f7ff f898 	bl	8000d36 <HAL_SPI_Init>
 8001c06:	b118      	cbz	r0, 8001c10 <MX_SPI1_Init+0x44>
  {
    Error_Handler();
  }

}
 8001c08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001c0c:	f7ff bfdc 	b.w	8001bc8 <Error_Handler>
 8001c10:	bd08      	pop	{r3, pc}
 8001c12:	bf00      	nop
 8001c14:	2000002c 	.word	0x2000002c
 8001c18:	40013000 	.word	0x40013000

08001c1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c1c:	b510      	push	{r4, lr}
 8001c1e:	4604      	mov	r4, r0
 8001c20:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	2214      	movs	r2, #20
 8001c24:	2100      	movs	r1, #0
 8001c26:	a803      	add	r0, sp, #12
 8001c28:	f000 f922 	bl	8001e70 <memset>
  if(spiHandle->Instance==SPI1)
 8001c2c:	6822      	ldr	r2, [r4, #0]
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_SPI_MspInit+0x60>)
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d120      	bne.n	8001c76 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c34:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c3a:	699a      	ldr	r2, [r3, #24]
 8001c3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c40:	619a      	str	r2, [r3, #24]
 8001c42:	699a      	ldr	r2, [r3, #24]
 8001c44:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c48:	9201      	str	r2, [sp, #4]
 8001c4a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c52:	615a      	str	r2, [r3, #20]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	9302      	str	r3, [sp, #8]
 8001c5c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c5e:	23e0      	movs	r3, #224	; 0xe0
 8001c60:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c6e:	2305      	movs	r3, #5
 8001c70:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f7fe fb61 	bl	8000338 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c76:	b008      	add	sp, #32
 8001c78:	bd10      	pop	{r4, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40013000 	.word	0x40013000

08001c80 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <HAL_MspInit+0x34>)
{
 8001c82:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	f042 0201 	orr.w	r2, r2, #1
 8001c8a:	619a      	str	r2, [r3, #24]
 8001c8c:	699a      	ldr	r2, [r3, #24]
 8001c8e:	f002 0201 	and.w	r2, r2, #1
 8001c92:	9200      	str	r2, [sp, #0]
 8001c94:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	69da      	ldr	r2, [r3, #28]
 8001c98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c9c:	61da      	str	r2, [r3, #28]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ca6:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001caa:	f7fe fae9 	bl	8000280 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cae:	b003      	add	sp, #12
 8001cb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cb4:	40021000 	.word	0x40021000

08001cb8 <NMI_Handler>:
 8001cb8:	4770      	bx	lr

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	e7fe      	b.n	8001cba <HardFault_Handler>

08001cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cbc:	e7fe      	b.n	8001cbc <MemManage_Handler>

08001cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cbe:	e7fe      	b.n	8001cbe <BusFault_Handler>

08001cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc0:	e7fe      	b.n	8001cc0 <UsageFault_Handler>

08001cc2 <SVC_Handler>:
 8001cc2:	4770      	bx	lr

08001cc4 <DebugMon_Handler>:
 8001cc4:	4770      	bx	lr

08001cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc6:	4770      	bx	lr

08001cc8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc8:	f7fe bab4 	b.w	8000234 <HAL_IncTick>

08001ccc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ccc:	4915      	ldr	r1, [pc, #84]	; (8001d24 <SystemInit+0x58>)
 8001cce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001cd2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <SystemInit+0x5c>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001ce4:	6858      	ldr	r0, [r3, #4]
 8001ce6:	4a11      	ldr	r2, [pc, #68]	; (8001d2c <SystemInit+0x60>)
 8001ce8:	4002      	ands	r2, r0
 8001cea:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001cf2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cfe:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001d06:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0a:	f022 020f 	bic.w	r2, r2, #15
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001d10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d12:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <SystemInit+0x64>)
 8001d14:	4002      	ands	r2, r0
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d20:	608b      	str	r3, [r1, #8]
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	f87fc00c 	.word	0xf87fc00c
 8001d30:	ff00fccc 	.word	0xff00fccc

08001d34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d34:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001d36:	480c      	ldr	r0, [pc, #48]	; (8001d68 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 38400;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_USART2_UART_Init+0x38>)
 8001d3a:	f44f 4e16 	mov.w	lr, #38400	; 0x9600
 8001d3e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d42:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d44:	2300      	movs	r3, #0
 8001d46:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d48:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d4a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d4c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d50:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d52:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d54:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d56:	f7ff fc89 	bl	800166c <HAL_UART_Init>
 8001d5a:	b118      	cbz	r0, 8001d64 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8001d5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001d60:	f7ff bf32 	b.w	8001bc8 <Error_Handler>
 8001d64:	bd08      	pop	{r3, pc}
 8001d66:	bf00      	nop
 8001d68:	20000090 	.word	0x20000090
 8001d6c:	40004400 	.word	0x40004400

08001d70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d70:	b510      	push	{r4, lr}
 8001d72:	4604      	mov	r4, r0
 8001d74:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d76:	2214      	movs	r2, #20
 8001d78:	2100      	movs	r1, #0
 8001d7a:	a803      	add	r0, sp, #12
 8001d7c:	f000 f878 	bl	8001e70 <memset>
  if(uartHandle->Instance==USART2)
 8001d80:	6822      	ldr	r2, [r4, #0]
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_UART_MspInit+0x60>)
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d120      	bne.n	8001dca <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d88:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d8e:	69da      	ldr	r2, [r3, #28]
 8001d90:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d94:	61da      	str	r2, [r3, #28]
 8001d96:	69da      	ldr	r2, [r3, #28]
 8001d98:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001d9c:	9201      	str	r2, [sp, #4]
 8001d9e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001da6:	615a      	str	r2, [r3, #20]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001db2:	230c      	movs	r3, #12
 8001db4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dc2:	2307      	movs	r3, #7
 8001dc4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	f7fe fab7 	bl	8000338 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dca:	b008      	add	sp, #32
 8001dcc:	bd10      	pop	{r4, pc}
 8001dce:	bf00      	nop
 8001dd0:	40004400 	.word	0x40004400

08001dd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e0c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001dd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001dda:	e003      	b.n	8001de4 <LoopCopyDataInit>

08001ddc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001dde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001de0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001de2:	3104      	adds	r1, #4

08001de4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001de4:	480b      	ldr	r0, [pc, #44]	; (8001e14 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001de8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001dea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001dec:	d3f6      	bcc.n	8001ddc <CopyDataInit>
	ldr	r2, =_sbss
 8001dee:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001df0:	e002      	b.n	8001df8 <LoopFillZerobss>

08001df2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001df2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001df4:	f842 3b04 	str.w	r3, [r2], #4

08001df8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <LoopForever+0x16>)
	cmp	r2, r3
 8001dfa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001dfc:	d3f9      	bcc.n	8001df2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dfe:	f7ff ff65 	bl	8001ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e02:	f000 f811 	bl	8001e28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e06:	f7ff fe7b 	bl	8001b00 <main>

08001e0a <LoopForever>:

LoopForever:
    b LoopForever
 8001e0a:	e7fe      	b.n	8001e0a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e0c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001e10:	08001f14 	.word	0x08001f14
	ldr	r0, =_sdata
 8001e14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e18:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001e1c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001e20:	20000100 	.word	0x20000100

08001e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC1_2_IRQHandler>
	...

08001e28 <__libc_init_array>:
 8001e28:	b570      	push	{r4, r5, r6, lr}
 8001e2a:	4e0d      	ldr	r6, [pc, #52]	; (8001e60 <__libc_init_array+0x38>)
 8001e2c:	4c0d      	ldr	r4, [pc, #52]	; (8001e64 <__libc_init_array+0x3c>)
 8001e2e:	1ba4      	subs	r4, r4, r6
 8001e30:	10a4      	asrs	r4, r4, #2
 8001e32:	2500      	movs	r5, #0
 8001e34:	42a5      	cmp	r5, r4
 8001e36:	d109      	bne.n	8001e4c <__libc_init_array+0x24>
 8001e38:	4e0b      	ldr	r6, [pc, #44]	; (8001e68 <__libc_init_array+0x40>)
 8001e3a:	4c0c      	ldr	r4, [pc, #48]	; (8001e6c <__libc_init_array+0x44>)
 8001e3c:	f000 f828 	bl	8001e90 <_init>
 8001e40:	1ba4      	subs	r4, r4, r6
 8001e42:	10a4      	asrs	r4, r4, #2
 8001e44:	2500      	movs	r5, #0
 8001e46:	42a5      	cmp	r5, r4
 8001e48:	d105      	bne.n	8001e56 <__libc_init_array+0x2e>
 8001e4a:	bd70      	pop	{r4, r5, r6, pc}
 8001e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e50:	4798      	blx	r3
 8001e52:	3501      	adds	r5, #1
 8001e54:	e7ee      	b.n	8001e34 <__libc_init_array+0xc>
 8001e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e5a:	4798      	blx	r3
 8001e5c:	3501      	adds	r5, #1
 8001e5e:	e7f2      	b.n	8001e46 <__libc_init_array+0x1e>
 8001e60:	08001f0c 	.word	0x08001f0c
 8001e64:	08001f0c 	.word	0x08001f0c
 8001e68:	08001f0c 	.word	0x08001f0c
 8001e6c:	08001f10 	.word	0x08001f10

08001e70 <memset>:
 8001e70:	4402      	add	r2, r0
 8001e72:	4603      	mov	r3, r0
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d100      	bne.n	8001e7a <memset+0xa>
 8001e78:	4770      	bx	lr
 8001e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e7e:	e7f9      	b.n	8001e74 <memset+0x4>

08001e80 <strcpy>:
 8001e80:	4603      	mov	r3, r0
 8001e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001e86:	f803 2b01 	strb.w	r2, [r3], #1
 8001e8a:	2a00      	cmp	r2, #0
 8001e8c:	d1f9      	bne.n	8001e82 <strcpy+0x2>
 8001e8e:	4770      	bx	lr

08001e90 <_init>:
 8001e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e92:	bf00      	nop
 8001e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e96:	bc08      	pop	{r3}
 8001e98:	469e      	mov	lr, r3
 8001e9a:	4770      	bx	lr

08001e9c <_fini>:
 8001e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9e:	bf00      	nop
 8001ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ea2:	bc08      	pop	{r3}
 8001ea4:	469e      	mov	lr, r3
 8001ea6:	4770      	bx	lr
